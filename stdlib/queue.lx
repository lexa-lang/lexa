type cell =
    | QueueNil
    | QueueCons of cell_ref

def queue_make() {
    // first, last, length
    newref {QueueNil, QueueNil, 0}
}

def queue_clear(q) {
    q[0] := QueueNil;
    q[1] := QueueNil;
    q[2] := 0
}

def queue_enqueue(q, x) {
    val new_cell = QueueCons (newref {x, QueueNil});
    match q[1] with
    | QueueNil -> { q[2] := 1; q[0] := new_cell; q[1] := new_cell }
    | QueueCons (last_cell) -> { q[2] := q[2] + 1; last_cell[1] := new_cell; q[1] := new_cell }
}

def queue_dequeue(q) {
    match q[0] with
    | QueueNil -> { ~error("Empty queue") }
    | QueueCons (first_cell) -> {
        val next = first_cell[1];
        match next with
        | QueueNil -> { queue_clear(q); first_cell[0] }
        | QueueCons (next_cell) -> { q[0] := first_cell[1]; q[2] := q[2] - 1; first_cell[0] }
    }
}

def queue_peek(q) {
    match q[0] with
    | QueueNil -> { ~error("Empty queue") }
    | QueueCons (cell_ref) -> { cell_ref[0] }
}

def queue_size(q) {
    q[2]
}

def queue_is_empty(q) {
    q[2] == 0
}
