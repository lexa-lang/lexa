This Docker image contains the software presented in the paper
`Lexical Effect Handlers, Directly` at OOPSLA2024. It contains
the compiler Lexic, a executable model of the language, and
a set of benchmarks.

Below is the directory structure of the image:
|-- artifact_eval/                         (entrypoint for artifact reviewers)
|-- racket-artifact/                       (executable model written in racket)
|-- benchmark-programs/          (benchmarks programs written in different languages)
|-- stacktrek/                       (the stack-switching library stacktrek and other supporting C libraries)
|-- lib/                                         (Lexic implementation in OCaml)
|-- bin/                                        (Lexic implementation in OCaml)
|-- test/                                       (Lexicâ€™s tests)
|-- nix/                                        (Nix dependency management)
|-- README.md
|-- flake.nix
|-- flake.lock
|-- dune-project
|-- Dockerfile

# How to run the artifact
Please find more details in the artifact manual in the submission.
In short, you can run the following commands and make sure
that no errors are reported:
```
python bench.py
python effekt_vs_lexi.py
python run_racket.py
```

# How to write your own program
You can go through the directories `benchmark-programs/lexi` and 
`test/lexi_snippets` directory to see examples of programs written in Lexic.
Then you can use `test/lexi_snippets/hello.lexi` as a starting point
to write your own program.
To compile and run the program, follow the instructions below
```
cd ./test/lexi_snippets
dune exec -- sstal hello.lexi -o hello.c
// The warnings from clang are benign
clang -O3 -g -I ../../stacktrek hello.c -o hello
./hello 42
```