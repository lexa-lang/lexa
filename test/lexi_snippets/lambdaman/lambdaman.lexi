effect Tracer {
    dcl pin
    dcl isPinned
    dcl record
}

effect Choice {
    dcl choose
}

def allocatePinMapRow(i, nrow, ncol, map) {
    if i == nrow then
        0
    else
        val rowData = ~arrayMakeInit(ncol, 0);
        val _ = ~arraySet(map, i, rowData);
        val _ = allocatePinMapRow(i + 1, nrow, ncol, map);
        0
}

def allocatePinMap(nrow, ncol) {
    val map = ~arrayMake(nrow);
    val _ = allocatePinMapRow(0, nrow, ncol, map);
    map
}

def allocateTrace() {
    ~arrayMake(0)
}

def findStart(i, j, nrow, ncol, outx, outy) {
    if i == nrow then
        0
    else 
        if j == ncol then
            findStart(i + 1, 0, nrow, ncol, outx, outy)
        else 
            if ~lambdaManGetField(i, j) == 76 then
                val _ = outx[0] := i;
                val _ = outy[0] := j;
                0
            else
                findStart(i, j + 1, nrow, ncol, outx, outy)
}

def walk(row, col, tracer_stub, choice_stub) {
    val _ = raise tracer_stub.pin row col;
    val pair = ~pairMake(row, col);
    val step = raise choice_stub.choose pair;
    if step == 85 then
        walk(row - 1, col, tracer_stub, choice_stub)
    else if step == 82 then
        walk(row, col + 1, tracer_stub, choice_stub)
    else if step == 68 then
        walk(row + 1, col, tracer_stub, choice_stub)
    else if step == 76 then
        walk(row, col - 1, tracer_stub, choice_stub)
    else
        0
}

def body2(env, choice_stub) {
    val startrow = env[0];
    val startcol = env[1];
    val tracer_stub = env[4];
    walk(startrow, startcol, tracer_stub, choice_stub)
}

def body1(env, tracer_stub) {
    val startrow = env[0];
    val startcol = env[1];
    val nrow = env[2];
    val ncol = env[3];
    handle {
        walk(startrow, startcol, tracer_stub, choice_stub)
    } with choice_stub: Choice {
        hdl_s choose(pair, k) {
            val row = ~pairFst(pair);
            val col = ~pairSnd(pair);
            val newrow = row - 1;
            val newcol = col;
            val _ = (if newrow > -1 then
                val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                    val _ = raise tracer_stub.record(85);
                    val _ = resume k 85;
                    val _ = raise tracer_stub.record(68);
                    0
                else 
                    0);
                0
            else
                0);
            val newrow = row;
            val newcol = col + 1;
            val _ = (if newcol < ncol then
                val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                    val _ = raise tracer_stub.record(82);
                    val _ = resume k 82;
                    val _ = raise tracer_stub.record(76);
                    0
                else 
                    0);
                0
            else
                0);
            val newrow = row + 1;
            val newcol = col;
            val _ = (if newrow < nrow then
                val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                    val _ = raise tracer_stub.record(68);
                    val _ = resume k 68;
                    val _ = raise tracer_stub.record(85);
                    0
                else 
                    0);
                0
            else
                0);
            val newrow = row;
            val newcol = col - 1;
            val _ = (if newcol > -1 then
                val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                    val _ = raise tracer_stub.record(76);
                    val _ = resume k 76;
                    val _ = raise tracer_stub.record(82);
                    0
                else 
                    0);
                0
            else
                0);
            0
        }
    }
}

def solveLambdaMan(nrow, ncol) {
    val startrow = newref {0};
    val startcol = newref {0};
    findStart(0, 0, nrow, ncol, startrow, startcol);
    val pinMap = allocatePinMap(nrow, ncol);
    val trace = allocateTrace();
    val startrow0 = startrow[0];
    val startcol0 = startcol[0];
    handle {
        val startrow = startrow0;
        val startcol = startcol0;
        handle {
            walk(startrow, startcol, tracer_stub, choice_stub)
        } with choice_stub: Choice {
            hdl_s choose(pair, k) {
                val row = ~pairFst(pair);
                val col = ~pairSnd(pair);
                val newrow = row - 1;
                val newcol = col;
                val _ = (if newrow > -1 then
                    val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                        val _ = raise tracer_stub.record(85);
                        val _ = resume k 85;
                        val _ = raise tracer_stub.record(68);
                        0
                    else 
                        0);
                    0
                else
                    0);
                val newrow = row;
                val newcol = col + 1;
                val _ = (if newcol < ncol then
                    val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                        val _ = raise tracer_stub.record(82);
                        val _ = resume k 82;
                        val _ = raise tracer_stub.record(76);
                        0
                    else 
                        0);
                    0
                else
                    0);
                val newrow = row + 1;
                val newcol = col;
                val _ = (if newrow < nrow then
                    val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                        val _ = raise tracer_stub.record(68);
                        val _ = resume k 68;
                        val _ = raise tracer_stub.record(85);
                        0
                    else 
                        0);
                    0
                else
                    0);
                val newrow = row;
                val newcol = col - 1;
                val _ = (if newcol > -1 then
                    val _ = (if raise tracer_stub.isPinned newrow newcol == 0 then
                        val _ = raise tracer_stub.record(76);
                        val _ = resume k 76;
                        val _ = raise tracer_stub.record(82);
                        0
                    else 
                        0);
                    0
                else
                    0);
                0
            }
        }
    } with tracer_stub: Tracer {
        def pin(row, col) {
            val rowData = ~arrayAt(pinMap, row);
            ~arraySet(rowData, col, 1);
            0
        }

        def isPinned(row, col) {
            val rowData = ~arrayAt(pinMap, row);
            ~boolOr(~arrayAt(rowData, col), ~lambdaManGetField(row, col) == 35)
        }

        def record(action) {
            ~arrayPush(trace, action);
            0
        }        
    };
    ~arrayPrintChars(trace);
    0
}


def main() {
    ~lambdaManInit();
    val ncol = ~lambdaManGetWidth();
    val nrow = ~lambdaManGetHeight();
    solveLambdaMan(nrow, ncol);
    0
}