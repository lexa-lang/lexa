effect Read {
    dcl read
}

effect Emit {
    dcl emit
}

effect Stop {
    dcl stop
}

def newline() {
    10
}

def is_newline(c) {
    c == 10
}

def dollar() {
    36
}

def is_dollar(c) {
    c == 36
}

obj emit(env) {
    def emit(e) {
        let s_ref = env[1] in
        let s = s_ref[0] in
        let s_inc = s + e in
        s_ref[0] := s_inc
    }
}

def sum_body(env, emit_stub) {
    let action = env[0] in
    let n = env[2] in
    action(emit_stub, n)
}

def sum(action, n) {
    let s = newref <0> in
    let _ = handle <action, s, n>
        sum_body
    with emit: Emit in
    s[0]
}

obj stop(env) {
    exc stop(_) { 0 }
}

def catch_body(env, stop_stub) {
    let action = env[0] in
    let emit_stub = env[1] in
    let n = env[2] in
    action(stop_stub, emit_stub, n)
}

def catch(action, emit_stub, n) {
    handle <action, emit_stub, n>
        catch_body
    with stop: Stop
}

obj read(env) {
    def read() {
        let i_ref = env[1] in
        let j_ref = env[2] in
        let i = i_ref[0] in
        let j = j_ref[0] in
        let n = env[3] in
        let stop_stub = env[4] in
        let cond = i > n in
        if cond then
            raise stop_stub.stop 0
        else
            let cond = j == 0 in
            if cond then
                let i_inc = i + 1 in
                let _ = i_ref[0] := i_inc in
                let _ = j_ref[0] := i_inc in
                newline()
            else
                let j_dec = j - 1 in
                let _ = j_ref[0] := j_dec in
                dollar()
    }
}

def feed(n, action, stop_stub, emit_stub) {
    let i = newref <0> in
    let j = newref <0> in
    handle <action, i, j, n, stop_stub, emit_stub>
        feed_body
    with read: Read
}

def feed_body(env, read_stub) {
    let action = env[0] in
    let stop_stub = env[4] in
    let emit_stub = env[5] in
    action(read_stub, emit_stub, stop_stub)
}

def parse(a, read_stub, emit_stub, stop_stub) {
    let c = raise read_stub.read 0 in
    let cond = is_dollar(c) in
    if cond then
        let a_inc = a + 1 in
        parse(a_inc, read_stub, emit_stub, stop_stub)
    else
        let cond = is_newline(c) in
        if cond then
            let _ = raise emit_stub.emit a in
            parse(0, read_stub, emit_stub, stop_stub)
        else
            raise stop_stub.stop 0
}

def feed_action(read_stub, emit_stub, stop_stub) {
    parse(0, read_stub, emit_stub, stop_stub)
}

def sum_action(emit_stub, n) {
    let catch_action_i64 = catch_action in
    catch(catch_action_i64, emit_stub, n)
}

def catch_action(stop_stub, emit_stub, n) {
    let feed_action_i64 = feed_action in
    feed(n, feed_action_i64, stop_stub, emit_stub)
}

def run(n) {
    let sum_action_i64 = sum_action in
    sum(sum_action_i64, n)
}

def main() {
    let n = ~readInt() in
    let run_result = run(n) in
    let _ = ~printInt(run_result) in
    0
}