open "common.lx"

type primDist = 
    | Constant
    | Normal of float * float
    | Uniform of float * float
    | DiscrUniform of int

def sampleLib(d) {
    match d with
    | Constant -> { ~error(1) } // constants can't be sampled
    | Normal (mu, sigma) -> {
        val u1 = ~floatRand();
        val u2 = ~floatRand();
        val r = ~floatSqrt(~floatMul(~boxFloat(-2), ~floatLog(u1)));
        val theta = ~floatMul(~floatMul(~boxFloat(2), ~floatPi()), u2);
        val u3 = ~floatRand();
        if ~floatLt(u3, ~boxFloat(0.5)) then
            ~floatAdd(mu, ~floatMul(~floatMul(sigma, r), ~floatCos(theta)))
        else
            ~floatAdd(mu, ~floatMul(~floatMul(sigma, r), ~floatSin(theta)))
    }
    | Uniform (a, b) -> {
        ~floatAdd(a, ~floatMul(~floatSub(b, a), ~floatRand()))
    }
    | DiscrUniform(n) -> { // unlike others, this case takes in and returns integers
        val interval = ~floatDiv(~boxFloat(1), ~boxFloat(n));
        ~unboxFloat(~floatDiv(~floatRand(), interval))
    }
}

def probLib(d, x) {
    match d with
    | Constant -> { ~boxFloat(1) }
    | Normal(mu, sigma) -> {
        // exp(-0.5 * pow((x - mu) / sigma, 2)) / (sigma * sqrt(2.0 * M_PI));
        val z = ~floatDiv(~floatSub(x, mu), sigma);
        val numerator = ~floatExp(~floatMul(~boxFloat(-0.5), ~floatPow(z, ~boxFloat(2))));
        val denominator = ~floatMul(sigma, ~floatSqrt(~floatMul(~boxFloat(2), ~floatPi())));
        ~floatDiv(numerator, denominator)
    }
    | Uniform(a, b) -> {
        if ~floatLeq(a, x) && ~floatLt(x, b) then
            ~floatDiv(~boxFloat(1), ~floatSub(b, a))
        else
            ~boxFloat(0)
    }
    | DiscrUniform(n) -> {
        ~floatDiv(~boxFloat(1), ~boxFloat(n))
    }
}

def printDist(d) {
    match d with
    | Constant -> { ~strPrint("Constant\n") }
    | Normal(mu, sigma) -> {
        ~strPrint("Normal");
        ~printFloat(mu);
        ~strPrint(", ");
        ~printFloat(sigma)
    }
    | Uniform(a, b) -> {
        ~strPrint("Uniform");
        ~printFloat(a);
        ~strPrint(", ");
        ~printFloat(b)
    }
    | DiscrUniform(n) -> {
        ~strPrint("DiscrUniform");
        ~printInt(n)
    }
}

def constant(name, core_stub) {
    val maybe_y = raise core_stub.read(name);
    match maybe_y with
    | Some(y) -> { 0 }
    | None -> { ~error(1) };
    raise core_stub.dist(Constant, name, maybe_y)
}

def normal(mu, sigma, name, core_stub) {
    val maybe_y = raise core_stub.read(name);
    raise core_stub.dist(Normal(mu, sigma), name, maybe_y)
}

def uniform(a, b, name, core_stub) {
    val maybe_y = raise core_stub.read(name);
    raise core_stub.dist(Uniform(a, b), name, maybe_y)
}