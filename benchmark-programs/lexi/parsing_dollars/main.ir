effect Read {
    dcl read
}

effect Emit {
    dcl emit
}

effect Stop {
    dcl stop
}

def newline() {
    10
}

def is_newline(c) {
    c == 10
}

def dollar() {
    36
}

def is_dollar(c) {
    c == 36
}

obj emit(env) {
    def emit(e) {
        val s_ref = env[1];
        s_ref[0] := s_ref[0] + e
    }
}

def sum_body(env, emit_stub) {
    val action = env[0];
    val n = env[2];
    action(emit_stub, n)
}

def sum(action, n) {
    val s = newref {0};
    handle {action, s, n}
        sum_body
    with emit: Emit;
    s[0]
}

obj stop(env) {
    exc stop(_) { 0 }
}

def catch_body(env, stop_stub) {
    val action = env[0];
    val emit_stub = env[1];
    val n = env[2];
    action(stop_stub, emit_stub, n)
}

def catch(action, emit_stub, n) {
    handle {action, emit_stub, n}
        catch_body
    with stop: Stop
}

obj read(env) {
    def read() {
        val i_ref = env[1];
        val j_ref = env[2];
        val i = i_ref[0];
        val j = j_ref[0];
        val n = env[3];
        val stop_stub = env[4];
        if i > n then
            raise stop_stub.stop 0
        else
            (if j == 0 then
                i_ref[0] := i + 1;
                j_ref[0] := i + 1;
                newline()
            else
                (j_ref[0] := j - 1;
                dollar()))
    }
}

def feed(n, action, stop_stub, emit_stub) {
    val i = newref {0};
    val j = newref {0};
    handle {action, i, j, n, stop_stub, emit_stub}
        feed_body
    with read: Read
}

def feed_body(env, read_stub) {
    val action = env[0];
    val stop_stub = env[4];
    val emit_stub = env[5];
    action(read_stub, emit_stub, stop_stub)
}

def parse(a, read_stub, emit_stub, stop_stub) {
    val c = raise read_stub.read 0;
    if is_dollar(c) then
        parse(a + 1, read_stub, emit_stub, stop_stub)
    else
        if is_newline(c) then
            raise emit_stub.emit a;
            parse(0, read_stub, emit_stub, stop_stub)
        else
            raise stop_stub.stop 0
}

def feed_action(read_stub, emit_stub, stop_stub) {
    parse(0, read_stub, emit_stub, stop_stub)
}

def sum_action(emit_stub, n) {
    val catch_action_i64 = catch_action;
    catch(catch_action_i64, emit_stub, n)
}

def catch_action(stop_stub, emit_stub, n) {
    val feed_action_i64 = feed_action;
    feed(n, feed_action_i64, stop_stub, emit_stub)
}

def run(n) {
    val sum_action_i64 = sum_action;
    sum(sum_action_i64, n)
}

def main() {
    val n = ~readInt();
    val run_result = run(n);
    ~printInt(run_result);
    0
}