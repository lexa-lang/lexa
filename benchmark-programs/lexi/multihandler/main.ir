effect State {
    dcl get
    dcl set
}

def countdown(state_stub) {
    val i = raise state_stub.get 0;
    val cond = i == 0;
    if cond then
        i
    else
        val arg = i - 1;
        val _ = raise state_stub.set arg;
        countdown(state_stub)
}

obj state1(env) {
    def get(_) { 
        val s = env[0];
        s[0]
    }

    def set(i) { 
        val s = env[0];
        val _ = s[0] := i;
        0
    }
}

obj state2(env) {
    def get(_) { 
        val s = env[0];
        s[0]
    }

    def set(i) { 
        val s = env[0];
        val _ = s[0] := i;
        0
    }
}

def body(env, state_stub) {
    countdown(state_stub)
}

def run(n) {
    val s = newref {n};
    val _ = (handle {s}
        body
    with state1: State);
    handle {s}
        body
    with state2: State
}

def main() {
    val arg1 = ~readInt();
    val arg2 = run(arg1);
    val _ = ~printInt(arg2);
    0
}

