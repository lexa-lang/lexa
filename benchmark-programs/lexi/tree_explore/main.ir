effect Choice {
  dcl choose
}

def operator(x, y) {
    ~mathAbs((x - 503 * y) + 37) % 1009
}

def make(n) {
    if n == 0 then
        ~treeLeaf()
    else
        val t = make(n - 1);
        ~treeNode(n, t, t)
}

def explore(state, tree, choice_stub) {
    if ~treeIsEmpty(tree) then
        state[0]
    else
        val next = 
            if raise choice_stub.choose(0) then 
                ~treeLeft(tree)
            else
                ~treeRight(tree)
        ;
        val arg1 = state[0];
        val arg2 = ~treeValue(tree);
        state[0] := operator(arg1, arg2);
        val arg3 = explore(state, next, choice_stub);
        operator(arg2, arg3)
}

def paths(state, tree) {
    handle {
            ~listNode(explore(state, tree, choice_stub), ~listEnd())
    } with choice_stub: Choice {
        hdl_s choose(_, k) {
            val arg1 = resume k true;
            val arg2 = resume_final k false;
            ~listAppend(arg1, arg2)
        }        
    }
}

def loop(state, tree, i) {
    if i == 0 then
        state[0]
    else
        (state[0] := ~listMax(paths(state, tree));
        loop(state, tree, i - 1))
}

def run(n) {
    val tree = make(n);
    val state = newref {0};
        loop(state, tree, 10)
}

def main() {
    val n = ~readInt();
    val res = run(n);
    ~printInt(res);
    0
}