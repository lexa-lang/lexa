effect Emit {
    dcl emit
}

def range(l, u, emit_stub) {
    if l > u then
        0
    else
        (raise emit_stub.emit l;
        range(l + 1, u, emit_stub))
}

obj emit(env) {
    def emit(e) {
        env[1][0] := (env[1][0] + e);
        0
    }
}

def body(env, emit_stub) {
    val n = env[0];
    range(0, n, emit_stub)
}

def run(n) {
    val s = newref {0};
    handle {n, s}
        body
    with emit: Emit;
    s[0]
}

def main() {
    ~printInt(run(~readInt()));
    0
}