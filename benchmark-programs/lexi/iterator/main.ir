effect Emit {
    dcl emit
}

def range(l, u, emit_stub) {
    val cond = l > u;
    if cond then
        0
    else
        val _ = raise emit_stub.emit l;
        val arg = l + 1;
        range(arg, u, emit_stub)
}

obj emit(env) {
    def emit(e) {
        val ss = env[1];
        val s = ss[0];
        val s_updated = s + e;
        ss[0] := s_updated
    }
}

def body(env, emit_stub) {
    val n = env[0];
    range(0, n, emit_stub)
}

def run(n) {
    val s = newref <0>;
    val _ = handle <n, s>
        body
    with emit: Emit;
    s[0]
}

def main() {
    val n = ~readInt();
    val res = run(n);
    val _ = ~printInt(res);
    0
}