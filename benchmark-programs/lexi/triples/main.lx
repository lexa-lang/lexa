effect Choice {
    dcl flip
    dcl fail
}

def choice(n, choice_stub) {
    if n < 1 then
        raise choice_stub.fail(0)
    else
        if raise choice_stub.flip(0) then
            n
        else
            choice(n - 1, choice_stub)
}

def triple(n, s, choice_stub) {
    val i = choice(n, choice_stub);
    val j = choice(i - 1, choice_stub);
    val k = choice(j - 1, choice_stub);
    if i + j + k == s then
        hash(i, j, k)
    else
        raise choice_stub.fail(0)
}

def run(n, s) {
    handle {
        triple(n, s, choice_stub)
    } with choice_stub: Choice {
        exc fail(_) {
            0
        }

        hdl_s flip(_, k) {
            (resume k true + resume_final k false) % 1000000007
        }
    }
}

def hash(a,b,c) {
    (53 * a + 2809 * b + 148877 * c) % 1000000007
}

def main() {
    val n = ~readInt();
    val res = run(n, n);
    ~printInt(res);
    0
}

