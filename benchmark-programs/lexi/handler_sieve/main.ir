effect Prime {
    dcl prime
}

obj prime(env) {
    def prime(e) {
        val i = env[0];
        val r = env[3];
        if (e % i) == 0 then
            false
        else
            raise r.prime e
    }
}

def primes_body(env, prime_stub) {
    val i = env[0];
    val n = env[1];
    val a = env[2];
    primes(prime_stub, i + 1, n, a + i)
}

def primes(prime_stub, i, n, a) {
    if i < n then
        if raise prime_stub.prime i then
            handle {i, n, a, prime_stub}
                primes_body
            with prime: Prime
        else
            primes(prime_stub, i + 1, n, a)
    else
        a
}

def body(env, prime_stub) {
    val n = env[0];
    primes(prime_stub, 2, n, 0)
}

obj prime_true(env) {
    def prime(e) {
        1
    }
}

def run(n) {
    handle {n}
        body
    with prime_true: Prime
}

def main() {
    val arg1 = ~readInt();
    val arg2 = run(arg1);
    val _ = ~printInt(arg2);
    0
}