effect Search {
    dcl pick
    dcl fail
}

def safe(queen, diag, xs) {
    val is_empty = ~listIsEmpty(xs);
    if is_empty then
        true
    else
        val q = ~listHead(xs);
        val qs = ~listTail(xs);
        val cond1 = queen != q;
        val t1 = q + diag;
        val cond2 = queen != t1;
        val t2 = q - diag;
        val cond3 = queen != t2;
        val cond12 = ~boolAnd(cond1, cond2);
        val cond123 = ~boolAnd(cond12, cond3);
        if cond123 then
            val diag_inc = diag + 1;
            safe(queen, diag_inc, qs)
        else
            false
}

def place(size, column, search_stub) {
    val is_zero = column == 0;
    if is_zero then
        ~listEnd()
    else
        val column_dec = column - 1;
        val rest = place(size, column_dec, search_stub);
        val next = raise search_stub.pick size;
        val is_safe = safe(next, 1, rest);
        if is_safe then
            val head = ~listNode(next, rest);
            head
        else
            raise search_stub.fail 0
}

def run(n) {
    handle {n}
        body
    with search: Search
}

def body(env, search_stub) {
    val n = env[0];
    val _ = place(n, n, search_stub);
    1
}

def loop(i, a, size, k) {
    val cond = i == size;
    if cond then
        val r = resume_final k i;
        a + r
    else
        val r = resume k i;
        val arg1 = i + 1;
        val arg2 = a + r;
        loop(arg1, arg2, size, k)
}

obj search(env) {
    exc fail(_) { 0 }
    hdl_s pick(size, k) {
        loop(1, 0, size, k)
    }
}

def main() {
    val n = ~readInt();
    val run_res = run(n);
    val _ = ~printInt(run_res);
    0
}