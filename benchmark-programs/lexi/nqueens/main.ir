effect Search {
    dcl pick
    dcl fail
}

def safe(queen, diag, xs) {
    val is_empty = ~listIsEmpty(xs);
    if is_empty then
        true
    else
        val q = ~listHead(xs);
        val qs = ~listTail(xs);
        if ~boolAnd(~boolAnd(queen != q, queen != q + diag), queen != q - diag) then
            safe(queen, diag + 1, qs)
        else
            false
}

def place(size, column, search_stub) {
    if column == 0 then
        ~listEnd()
    else
        val rest = place(size, column - 1, search_stub);
        val next = raise search_stub.pick size;
        if safe(next, 1, rest) then
            ~listNode(next, rest)
        else
            raise search_stub.fail 0
}

def run(n) {
    handle {
        place(n, n, search_stub);
        1
    } with search_stub: Search {
        exc fail(_) { 0 }
        hdl_s pick(size, k) {
            loop(1, 0, size, k)
        }
    }
}

def loop(i, a, size, k) {
    if i == size then
        a + resume_final k i
    else
        loop(i + 1, a + resume k i, size, k)
}

def main() {
    val n = ~readInt();
    val run_res = run(n);
    ~printInt(run_res);
    0
}