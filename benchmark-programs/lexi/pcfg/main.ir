effect Prob {
  dcl choose
  dcl sampleCategorical
  dcl fail
}

def parse(prob_stub, tokens, symbols) {
    val cond = ~listIsEmpty(symbols);
    if cond then
        val tokenLen = ~stringLen(tokens);
        val cond = tokenLen == 0;
        if cond then
            0
        else
            raise prob_stub.fail 0
    else
        val s = ~listHead(symbols);
        val ss = ~listTail(symbols);
        val len = ~stringLen(tokens);
        val sp = raise prob_stub.choose len;
        val substr1 = ~stringSubStr(tokens, 0, sp);
        val _ = s(prob_stub, substr1);
        val substr2 = ~stringSubStr(tokens, sp, len);
        parse(prob_stub, substr2, ss)
}

def parse_empty(prob_stub, tokens) {
    val end = ~listEnd();
    parse(prob_stub, tokens, end)
}

def parse_terminal(prob_stub, tokens) {
    val tokenLen = ~stringLen(tokens);
    val cond = tokenLen == 0;
    if cond then
        raise prob_stub.fail 0
    else
        val first = ~stringCharAt(tokens, 0);
        val cond = first == 97;
        if cond then
            val len = ~stringLen(tokens);
            val rest = ~stringSubStr(tokens, 1, len);
            parse_empty(prob_stub, rest)
        else
            raise prob_stub.fail 0
}

def foldl1(env, acc, i, n) {
    val cond = i == n;
    if cond then
        acc
    else
        val k = env[0];
        val logits = env[1];
        val r = resume k i;
        val logit = ~listAt(logits, i);
        val p = ~floatMul(r, logit);
        val s = ~floatAdd(acc, p);
        val inc = i + 1;
        foldl1(env, s, inc, n)
}

def foldl2(env, acc, i, n) {
    val cond = i == n;
    if cond then
        acc
    else
        val k = env[0];
        val r = resume k i;
        val s = ~floatAdd(acc, r);
        val inc = i + 1;
        foldl2(env, s, inc, n)
}

obj marginalize(env) {
    hdl_s sampleCategorical(_, k) {
        val logits = make_logits();
        val n = ~listLen(logits);
        val fold_env = newref <k, logits>;
        foldl1(fold_env, 0, 0, n)
    }

    hdl_s choose(n, k) {
        val fold_env = newref <k>;
        val n1 = n+1;
        foldl2(fold_env, 0, 0, n1)
    }

    exc fail(_) {
        ~floatMake(0, 10)
    }
}

def parse_S(prob_stub, tokens) {
    val productions = make_productions();
    val prod = raise prob_stub.sampleCategorical 0;
    val production = ~listAt(productions,prod);
    parse(prob_stub, tokens, production)
}

def body(env, prob_stub) {
    val tokens = ~stringMake(97, 1);
    val _ = parse_S(prob_stub, tokens);
    ~floatMake(1, 1)
}

def make_logits() {
    val f7 = ~floatMake(7, 10);
    val f3 = ~floatMake(3, 10);
    val l0 = ~listEnd();
    val l1 = ~listNode(f7, l0);
    ~listNode(f3, l1)
}

def make_productions() {
    val p1 = ~listEnd();
    val p20 = ~listEnd();
    val p21 = ~listNode(parse_S, p20);
    val p2 = ~listNode(parse_terminal, p21);
    val s0 = ~listEnd();
    val s1 = ~listNode(p2, s0);
    ~listNode(p1, s1)
}

def main() {
    val logits = make_logits();
    val productions = make_productions();
    val out = 
        handle <logits, productions>
            body
        with marginalize: Prob
;
    ~floatPrint(out)
}