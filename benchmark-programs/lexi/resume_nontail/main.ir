effect Operator {
    dcl operator
}

def loop(i, s, operator_stub) {
    val cond = i == 0;
    if cond then
        s
    else
        val _ = raise operator_stub.operator i;
        val i_dec = i - 1;
        loop(i_dec, s, operator_stub)
}

obj operator(env) {
    hdl_1 operator(x, k) {
        val y = resume_final k 0;
        val y503 = 503 * y;
        val minus_res = x - y503;
        val plus_res = minus_res + 37;
        val abs_res = ~mathAbs(plus_res);
        abs_res % 1009
    }
}

def run(n, s) {
    handle <n, s>
        body
    with operator: Operator
}

def body(env, operator_stub) {
    val n = env[0];
    val s = env[1];
    loop(n, s, operator_stub)
}

def step(l, s, n) {
    val cond = l == 0;
    if cond then
        s
    else
        val l_dec = l - 1;
        val run_res = run(n, s);
        step(l_dec, run_res, n)
}

def repeat(n) {
    step(1000, 0, n)
}

def main() {
    val n = ~readInt();
    val result = repeat(n);
    val _ = ~printInt(result);
    0
}