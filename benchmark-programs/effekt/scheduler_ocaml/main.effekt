import exnlist
import exndequeue
import immutable/option
import text/string
import io/args

interface Tick {
  def tick(): Unit
}

interface Process {
  def yield(): Unit
  def exit(): Nothing
  def fork { p: () => Unit / Process }: Boolean
}

extern pure def cast[T, R](x : T): R =
  "${x}"


def scheduler { prog: => Unit / Process }: Unit = region this {
  var queue: Dequeue[() => Unit at {this, prog}] in this = emptyQueue();

  def driver(): Unit = 
    try {
      queue.popBack match {
        case (k, q) =>
          queue = q
          k();
          driver()
      }
    } with NoSuchElementException {
      def throwNSE() = ()
    }

  def spawn(prog1: () => Unit / Process at {this, prog} ): Unit = {
    try { prog1() } with Process {
      def yield() = {
        queue = queue.pushFront(fun() { resume(()) })
      }
      def fork() = {
        queue = queue.pushFront(fun() { resume { {_: () => Unit / Process } => false } })
        resume { {p: () => Unit / Process } => spawn(cast(box p)); true } 
      }
      def exit() = ()
    }
  }

  spawn(prog)
  driver()
}

def job(): Unit / Process = {
  do yield();
}

def jobs(n_jobs: Int): Unit / {Process, Tick} = {
  var i = 0;
  while (i < n_jobs) {
    if (do fork {job(); do tick()}) {
      do exit()
    }
    i = i + 1
  }
}

def run(n: Int): Int = {
  var c = 0;
  try {
    scheduler {
      jobs(n)
    };
  } with Tick {
    def tick() = {
      c = c + 1;
      resume( () );
    }
  }
  c
}

def main() = commandLineArgs() match {
  case Nil() => println(run(1000000))
  case Cons(x, Nil()) => toInt(x) match {
    case Some(i) => println(run(i))
    case _ => println("Unexpected non-integer(s) '" ++ show(x) ++ "'")
  }
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}