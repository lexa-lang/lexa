import list
import args
import bench

record Triple(a: Int, b: Int, c: Int)

effect Flip(): Bool

effect Fail(): Nothing

def choice(n: Int): Int / {Flip, Fail} = {
  if (n < 1) {
    do Fail() match {}
  } else if (do Flip()) {
    n
  } else {
    choice(n - 1)
  }
}

def triple(n: Int, s: Int): Triple / {Flip, Fail} = {
  val i = choice(n)
  val j = choice(i - 1)
  val k = choice(j - 1)
  if (i + j + k == s) {
    Triple(i, j, k)
  } else {
    do Fail() match {}
  }
}

def hash(triple: Triple): Int = triple match {
  case Triple(a, b, c) => mod(((53 * a) + 2809 * b + 148877 * c), 1000000007)
}

def run(n: Int, s: Int): Int =
  try {
    hash(triple(n, s))
  } with Flip {
    def Flip() = mod(resume(true) + resume(false), 1000000007)
  } with Fail {
    def Fail() = 0
  }

def main() = ignore[WrongFormat] {commandLineArgs() match {
  case Nil() => println("Expects one argument")
  case Cons(x, Cons(y, Nil())) => 
    println("Measuring internal running time")
    val t = timed{ run(x.toInt, x.toInt); () }
    println("Nanosecond used: " ++ show(t))
  case Cons(x, Nil()) =>
    val r = run(x.toInt, x.toInt)
    println(r)
  case other => println("Expects one argument, not '" ++ show(size(other)) ++ "'")
}
}
