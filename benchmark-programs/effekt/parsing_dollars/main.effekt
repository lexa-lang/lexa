import list
import args
import bench

type Chr = Int

effect Read(): Chr

effect Emit(e: Int): Unit

effect Stop(): Nothing

def newline() =
  10
def isNewline(c: Chr) =
  c == 10
def dollar(): Chr =
  36
def isDollar(c: Chr) =
  c == 36

def parse(a: Int): Unit / {Read, Emit, Stop} = {
  val c = do Read();
  if (isDollar(c)) {
    parse(a + 1)
  } else if (isNewline(c)) {
      do Emit(a);
      parse(0)
    } else {
      do Stop()
    }
}

def sum { action: () => Unit / Emit } = {
  var s = 0;
  try {
    action()
  } with Emit { (e: Int) =>
    s = s + e;
    resume(())
  };
  s
}

def catch { action: () => Unit / Stop } =
  try {
    action()
  } with Stop { () =>
    ()
  }

def feed(n: Int) { action: () => Unit / Read } = {
  var i = 0;
  var j = 0;
  try {
    action()
  } with Read { () =>
    if (i > n) {
      do Stop() match {}
    } else if (j == 0) {
      i = i + 1;
      j = i;
      resume(newline())
    } else {
      j = j - 1;
      resume(dollar())
    }
  }
}

def run(n: Int) =
  sum { catch { feed(n) { parse(0) } } }

def main() = ignore[WrongFormat] {commandLineArgs() match {
  case Nil() => println("Expects one argument")
  case Cons(x, Cons(y, Nil())) => 
    println("Measuring internal running time")
    val i = x.toInt; var r = 0; val t = timed{ r = run(i); };
    println("Nanosecond used: " ++ show(t))
    println(r)
  case Cons(x, Nil()) =>
    val i = x.toInt; val r = run(i);
    println(r)
  case other => println("Expects one argument, not '" ++ show(size(other)) ++ "'")
}
}
