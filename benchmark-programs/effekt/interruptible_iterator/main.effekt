
import immutable/list
import immutable/option
import text/string
import io/args

def ignoring0[E] { prog: => List[Int] / Exception[E] }: List[Int] =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = [] }

effect Yield(value: Int): Unit / { Replace, Behead }
effect Replace(value: Int): Unit
effect Behead(): Unit

def range(start: Int, size: Int): List[Int] = {
  build(size) { i => start + i }
}

def iter(l: List[Int]): List[Int] / { Yield, Behead } =  {

    def loop(it: List[Int]): List[Int] / { Yield, Behead } = ignoring0[EmptyList] {
        var hd = it.head;
        var tl = it.tail;
        var beheaded = false;
        try { 
            do Yield(hd); 
        } with Replace { n =>
            hd = n;
            resume(())
        }
        val newtl =
            if (isEmpty(tl)) {
                []
            } else {
                try {
                    loop(tl)
                } with Behead {
                    beheaded = true
                    resume(())
                }
            }
        if (beheaded) {
            Cons(hd, newtl.drop(1))
        } else {
            Cons(hd, newtl)
        }
    }
    loop(l)
}

def run(n: Int) = ignoring0[EmptyList] {
    var lst = range(0-n, 2*n);
    var beheaded = false;
    var res = try { lst.iter }
        with Yield { x =>
        resume { if (x < 0) do Behead() else do Replace(x * 2) }
        }
        with Behead { () =>
            beheaded = true;
            resume(())
        };
    if (beheaded) res.drop(1) else res
}

def step(i: Int, acc: Int, n_jobs: Int): Int = {
  if (i == 0) {
    acc
  } else {
    step(i - 1, sum(run(n_jobs))+acc, n_jobs)
  }
}

def repeat(n_jobs: Int): Int = {
  step(1000, 0, n_jobs)
}

def main() = commandLineArgs() match {
  case Nil() => println(repeat(10))
  case Cons(x, Nil()) => toInt(x) match {
    case Some(i) => println(repeat(i))
    case _ => println("Unexpected non-integer(s) '" ++ show(x) ++ "'")
  }
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}