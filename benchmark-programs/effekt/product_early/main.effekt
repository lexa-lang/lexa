import list
import args
import bench

effect Abort[A](i: Int): A

def product(xs: List[Int]): Int / Abort =
  xs match {
    case Nil() => 0
    case Cons(y, ys) => if (y == 0) { do Abort(0) } else { y * product(ys) }
  }

def enumerate(i: Int): List[Int] =
  if (i < 0) {
      Nil()
  } else {
      Cons(i, enumerate(i - 1))
  }

def runProduct(xs: List[Int]) =
  try {
    product(xs)
  } with Abort {
    def Abort[A](r) = r
  }

def run(n: Int) = {
  val xs = enumerate(1000);
  def loop(i: Int, a: Int): Int = {
    if (i == 0) {
      a
    } else {
      loop (i - 1, a + runProduct(xs))
    }
  }
  loop(n,0)
}

def main() = ignore[WrongFormat] {commandLineArgs() match {
  case Nil() => println("Expects one argument")
  case Cons(x, Cons(y, Nil())) => 
    println("Measuring internal running time")
    val t = timed{ run(x.toInt); () }
    println("Nanosecond used: " ++ show(t))
  case Cons(x, Nil()) =>
    val r = run(x.toInt)
    println(r)
  case other => println("Expects one argument, not '" ++ show(size(other)) ++ "'")
}
}