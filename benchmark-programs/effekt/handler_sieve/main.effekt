import args
import bench

effect Prime(e: Int): Bool

def primes(i: Int, n: Int, a: Int): Int / {Prime} =
  if (i >= n) {
    a
  } else {
    if (do Prime(i)) {
      try {
        primes(i + 1, n, a + i)
      } with Prime { (e: Int) =>
        if (mod(e, i) == 0) {
          resume(false)
        } else {
          resume(do Prime(e))
        }
      }
    } else {
      primes(i + 1, n, a)
    }
  }

def run(n: Int) = {
  try {
    primes(2, n, 0)
  } with Prime { (e: Int) =>
    resume(true)
  }
}

def main() = ignore[WrongFormat] {commandLineArgs() match {
  case Nil() => println("Expects one argument")
  case Cons(x, Nil()) =>
    val t = timed{ 
              val r = run(x.toInt)
              println(r)
            }
    println("Time used: " ++ show(t / 1000 / 1000))
  case other => println("Expects one argument, not '" ++ show(size(other)) ++ "'")
}
}