/// <reference types="node" resolution-mode="require"/>
import type { pipeline as pipelineType } from 'node:stream/promises';
import { type DuplexWithDebug, type TransformMethod, type TransformLike } from './queue.js';
export * from './queue.js';
declare const pipeline: typeof pipelineType;
export { pipeline };
export declare const transform: <ChunkType = any>(transform: TransformMethod<ChunkType>, end?: ((this: TransformLike<ChunkType>) => void | Promise<void>) | undefined) => DuplexWithDebug;
/**
 * Shortcut to create a passthrough with spy.
 */
export declare const passthrough: <ChunkType = any>(spy?: ((this: TransformLike<ChunkType>, chunk: ChunkType) => Promise<void> | void) | undefined, end?: ((this: TransformLike<ChunkType>) => void | Promise<void>) | undefined) => DuplexWithDebug;
/**
 * Create a filter stream.
 */
export declare const filter: <ChunkType = any>(filter: (chunk: ChunkType) => boolean | Promise<boolean>, end?: ((this: TransformLike<ChunkType>) => void) | undefined) => DuplexWithDebug;
