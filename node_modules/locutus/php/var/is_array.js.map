{"version":3,"sources":["../../../src/php/var/is_array.js"],"names":["module","exports","is_array","mixedVar","_getFuncName","fn","name","exec","_isArray","length","len","isArray","iniVal","require","undefined","asString","Object","prototype","toString","call","asFunc","constructor"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,SAAfA,YAAe,CAAUC,EAAV,EAAc;AACjC,QAAMC,OAAO,8BAA8BC,IAA9B,CAAmCF,EAAnC,CAAb;AACA,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,aAAP;AACD;AACD,WAAOA,KAAK,CAAL,CAAP;AACD,GAND;AAOA,MAAME,WAAW,SAAXA,QAAW,CAAUL,QAAV,EAAoB;AACnC;AACA;AACA;AACA;AACA,QAAI,CAACA,QAAD,IAAa,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAAjC,IAA6C,OAAOA,SAASM,MAAhB,KAA2B,QAA5E,EAAsF;AACpF,aAAO,KAAP;AACD;AACD,QAAMC,MAAMP,SAASM,MAArB;AACAN,aAASA,SAASM,MAAlB,IAA4B,OAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIC,QAAQP,SAASM,MAArB,EAA6B;AAC3B;AACA;AACAN,eAASM,MAAT,IAAmB,CAAnB;AACA,aAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA,WAAON,SAASA,SAASM,MAAlB,CAAP;AACA,WAAO,KAAP;AACD,GA9BD;;AAgCA,MAAI,CAACN,QAAD,IAAa,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAArC,EAA+C;AAC7C,WAAO,KAAP;AACD;;AAED,MAAMQ,UAAUH,SAASL,QAAT,CAAhB;;AAEA,MAAIQ,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AAED,MAAMC,SACJ,CAAC,OAAOC,OAAP,KAAmB,WAAnB,GAAiCA,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyFC,SAA1F,KAAwG,IAD1G;AAEA,MAAIF,WAAW,IAAf,EAAqB;AACnB,QAAMG,WAAWC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BhB,QAA/B,CAAjB;AACA,QAAMiB,SAAShB,aAAaD,SAASkB,WAAtB,CAAf;;AAEA,QAAIN,aAAa,iBAAb,IAAkCK,WAAW,QAAjD,EAA2D;AACzD;AACA,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CA5FD","file":"is_array.js","sourcesContent":["module.exports = function is_array(mixedVar) {\n  //  discuss at: https://locutus.io/php/is_array/\n  // original by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Legaev Andrey\n  // improved by: Onno Marsman (https://twitter.com/onnomarsman)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Nathan Sepulveda\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: Cord\n  // bugfixed by: Manish\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      note 1: In Locutus, javascript objects are like php associative arrays,\n  //      note 1: thus JavaScript objects will also\n  //      note 1: return true in this function (except for objects which inherit properties,\n  //      note 1: being thus used as objects),\n  //      note 1: unless you do ini_set('locutus.objectsAsArrays', 0),\n  //      note 1: in which case only genuine JavaScript arrays\n  //      note 1: will return true\n  //   example 1: is_array(['Kevin', 'van', 'Zonneveld'])\n  //   returns 1: true\n  //   example 2: is_array('Kevin van Zonneveld')\n  //   returns 2: false\n  //   example 3: is_array({0: 'Kevin', 1: 'van', 2: 'Zonneveld'})\n  //   returns 3: true\n  //   example 4: ini_set('locutus.objectsAsArrays', 0)\n  //   example 4: is_array({0: 'Kevin', 1: 'van', 2: 'Zonneveld'})\n  //   returns 4: false\n  //   example 5: is_array(function tmp_a (){ this.name = 'Kevin' })\n  //   returns 5: false\n\n  const _getFuncName = function (fn) {\n    const name = /\\W*function\\s+([\\w$]+)\\s*\\(/.exec(fn)\n    if (!name) {\n      return '(Anonymous)'\n    }\n    return name[1]\n  }\n  const _isArray = function (mixedVar) {\n    // return Object.prototype.toString.call(mixedVar) === '[object Array]';\n    // The above works, but let's do the even more stringent approach:\n    // (since Object.prototype.toString could be overridden)\n    // Null, Not an object, no length property so couldn't be an Array (or String)\n    if (!mixedVar || typeof mixedVar !== 'object' || typeof mixedVar.length !== 'number') {\n      return false\n    }\n    const len = mixedVar.length\n    mixedVar[mixedVar.length] = 'bogus'\n    // The only way I can think of to get around this (or where there would be trouble)\n    // would be to have an object defined\n    // with a custom \"length\" getter which changed behavior on each call\n    // (or a setter to mess up the following below) or a custom\n    // setter for numeric properties, but even that would need to listen for\n    // specific indexes; but there should be no false negatives\n    // and such a false positive would need to rely on later JavaScript\n    // innovations like __defineSetter__\n    if (len !== mixedVar.length) {\n      // We know it's an array since length auto-changed with the addition of a\n      // numeric property at its length end, so safely get rid of our bogus element\n      mixedVar.length -= 1\n      return true\n    }\n    // Get rid of the property we added onto a non-array object; only possible\n    // side-effect is if the user adds back the property later, it will iterate\n    // this property in the older order placement in IE (an order which should not\n    // be depended on anyways)\n    delete mixedVar[mixedVar.length]\n    return false\n  }\n\n  if (!mixedVar || typeof mixedVar !== 'object') {\n    return false\n  }\n\n  const isArray = _isArray(mixedVar)\n\n  if (isArray) {\n    return true\n  }\n\n  const iniVal =\n    (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.objectsAsArrays') : undefined) || 'on'\n  if (iniVal === 'on') {\n    const asString = Object.prototype.toString.call(mixedVar)\n    const asFunc = _getFuncName(mixedVar.constructor)\n\n    if (asString === '[object Object]' && asFunc === 'Object') {\n      // Most likely a literal and intended as assoc. array\n      return true\n    }\n  }\n\n  return false\n}\n"]}