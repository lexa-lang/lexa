{"version":3,"sources":["../../../src/php/var/unserialize.js"],"names":["initCache","store","cache","value","push","get","index","length","RangeError","expectType","str","types","type","exec","SyntaxError","expectBool","expectInt","expectFloat","expectString","expectEscapedString","expectArray","expectObject","expectClass","expectReference","reBool","match","boolMatch","reInt","intMatch","parseInt","reFloat","floatMatch","floatValue","Number","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseFloat","readBytes","len","escapedString","bytes","out","c","strLen","wasHighSurrogate","escapedChars","chr","charAt","code","charCodeAt","isHighSurrogate","isLowSurrogate","String","fromCharCode","substr","reStrLength","byteLenMatch","strMatch","startsWith","strLenMatch","expectKeyOrIndex","err","reObjectLiteral","objectLiteralBeginMatch","className","propCountMatch","totalOffset","propCount","obj","i","prop","Error","reRef","refIndex","reArrayLength","arrayLiteralBeginMatch","arrayLengthMatch","array","expectArrayItems","expectedItems","key","item","hasContinousIndexes","lastIndex","items","Object","values","module","exports","unserialize","console","error"],"mappings":"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","file":"unserialize.js","sourcesContent":["function initCache() {\n  const store = []\n  // cache only first element, second is length to jump ahead for the parser\n  const cache = function cache(value) {\n    store.push(value[0])\n    return value\n  }\n\n  cache.get = (index) => {\n    if (index >= store.length) {\n      throw RangeError(`Can't resolve reference ${index + 1}`)\n    }\n\n    return store[index]\n  }\n\n  return cache\n}\n\nfunction expectType(str, cache) {\n  const types = /^(?:N(?=;)|[bidsSaOCrR](?=:)|[^:]+(?=:))/g\n  const type = (types.exec(str) || [])[0]\n\n  if (!type) {\n    throw SyntaxError('Invalid input: ' + str)\n  }\n\n  switch (type) {\n    case 'N':\n      return cache([null, 2])\n    case 'b':\n      return cache(expectBool(str))\n    case 'i':\n      return cache(expectInt(str))\n    case 'd':\n      return cache(expectFloat(str))\n    case 's':\n      return cache(expectString(str))\n    case 'S':\n      return cache(expectEscapedString(str))\n    case 'a':\n      return expectArray(str, cache)\n    case 'O':\n      return expectObject(str, cache)\n    case 'C':\n      return expectClass(str, cache)\n    case 'r':\n    case 'R':\n      return expectReference(str, cache)\n    default:\n      throw SyntaxError(`Invalid or unsupported data type: ${type}`)\n  }\n}\n\nfunction expectBool(str) {\n  const reBool = /^b:([01]);/\n  const [match, boolMatch] = reBool.exec(str) || []\n\n  if (!boolMatch) {\n    throw SyntaxError('Invalid bool value, expected 0 or 1')\n  }\n\n  return [boolMatch === '1', match.length]\n}\n\nfunction expectInt(str) {\n  const reInt = /^i:([+-]?\\d+);/\n  const [match, intMatch] = reInt.exec(str) || []\n\n  if (!intMatch) {\n    throw SyntaxError('Expected an integer value')\n  }\n\n  return [parseInt(intMatch, 10), match.length]\n}\n\nfunction expectFloat(str) {\n  const reFloat = /^d:(NAN|-?INF|(?:\\d+\\.\\d*|\\d*\\.\\d+|\\d+)(?:[eE][+-]\\d+)?);/\n  const [match, floatMatch] = reFloat.exec(str) || []\n\n  if (!floatMatch) {\n    throw SyntaxError('Expected a float value')\n  }\n\n  let floatValue\n\n  switch (floatMatch) {\n    case 'NAN':\n      floatValue = Number.NaN\n      break\n    case '-INF':\n      floatValue = Number.NEGATIVE_INFINITY\n      break\n    case 'INF':\n      floatValue = Number.POSITIVE_INFINITY\n      break\n    default:\n      floatValue = parseFloat(floatMatch)\n      break\n  }\n\n  return [floatValue, match.length]\n}\n\nfunction readBytes(str, len, escapedString = false) {\n  let bytes = 0\n  let out = ''\n  let c = 0\n  const strLen = str.length\n  let wasHighSurrogate = false\n  let escapedChars = 0\n\n  while (bytes < len && c < strLen) {\n    let chr = str.charAt(c)\n    const code = chr.charCodeAt(0)\n    const isHighSurrogate = code >= 0xd800 && code <= 0xdbff\n    const isLowSurrogate = code >= 0xdc00 && code <= 0xdfff\n\n    if (escapedString && chr === '\\\\') {\n      chr = String.fromCharCode(parseInt(str.substr(c + 1, 2), 16))\n      escapedChars++\n\n      // each escaped sequence is 3 characters. Go 2 chars ahead.\n      // third character will be jumped over a few lines later\n      c += 2\n    }\n\n    c++\n\n    bytes +=\n      isHighSurrogate || (isLowSurrogate && wasHighSurrogate)\n        ? // if high surrogate, count 2 bytes, as expectation is to be followed by low surrogate\n          // if low surrogate preceded by high surrogate, add 2 bytes\n          2\n        : code > 0x7ff\n          ? // otherwise low surrogate falls into this part\n            3\n          : code > 0x7f\n            ? 2\n            : 1\n\n    // if high surrogate is not followed by low surrogate, add 1 more byte\n    bytes += wasHighSurrogate && !isLowSurrogate ? 1 : 0\n\n    out += chr\n    wasHighSurrogate = isHighSurrogate\n  }\n\n  return [out, bytes, escapedChars]\n}\n\nfunction expectString(str) {\n  // PHP strings consist of one-byte characters.\n  // JS uses 2 bytes with possible surrogate pairs.\n  // Serialized length of 2 is still 1 JS string character\n  const reStrLength = /^s:(\\d+):\"/g // also match the opening \" char\n  const [match, byteLenMatch] = reStrLength.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected a string value')\n  }\n\n  const len = parseInt(byteLenMatch, 10)\n\n  str = str.substr(match.length)\n\n  const [strMatch, bytes] = readBytes(str, len)\n\n  if (bytes !== len) {\n    throw SyntaxError(`Expected string of ${len} bytes, but got ${bytes}`)\n  }\n\n  str = str.substr(strMatch.length)\n\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";')\n  }\n\n  return [strMatch, match.length + strMatch.length + 2] // skip last \";\n}\n\nfunction expectEscapedString(str) {\n  const reStrLength = /^S:(\\d+):\"/g // also match the opening \" char\n  const [match, strLenMatch] = reStrLength.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected an escaped string value')\n  }\n\n  const len = parseInt(strLenMatch, 10)\n\n  str = str.substr(match.length)\n\n  const [strMatch, bytes, escapedChars] = readBytes(str, len, true)\n\n  if (bytes !== len) {\n    throw SyntaxError(`Expected escaped string of ${len} bytes, but got ${bytes}`)\n  }\n\n  str = str.substr(strMatch.length + escapedChars * 2)\n\n  // strict parsing, match closing \"; chars\n  if (!str.startsWith('\";')) {\n    throw SyntaxError('Expected \";')\n  }\n\n  return [strMatch, match.length + strMatch.length + 2] // skip last \";\n}\n\nfunction expectKeyOrIndex(str) {\n  try {\n    return expectString(str)\n  } catch (err) {}\n\n  try {\n    return expectEscapedString(str)\n  } catch (err) {}\n\n  try {\n    return expectInt(str)\n  } catch (err) {\n    throw SyntaxError('Expected key or index')\n  }\n}\n\nfunction expectObject(str, cache) {\n  // O:<class name length>:\"class name\":<prop count>:{<props and values>}\n  // O:8:\"stdClass\":2:{s:3:\"foo\";s:3:\"bar\";s:3:\"bar\";s:3:\"baz\";}\n  const reObjectLiteral = /^O:(\\d+):\"([^\"]+)\":(\\d+):\\{/\n  const [objectLiteralBeginMatch /* classNameLengthMatch */, , className, propCountMatch] =\n    reObjectLiteral.exec(str) || []\n\n  if (!objectLiteralBeginMatch) {\n    throw SyntaxError('Invalid input')\n  }\n\n  if (className !== 'stdClass') {\n    throw SyntaxError(`Unsupported object type: ${className}`)\n  }\n\n  let totalOffset = objectLiteralBeginMatch.length\n\n  const propCount = parseInt(propCountMatch, 10)\n  const obj = {}\n  cache([obj])\n\n  str = str.substr(totalOffset)\n\n  for (let i = 0; i < propCount; i++) {\n    const prop = expectKeyOrIndex(str)\n    str = str.substr(prop[1])\n    totalOffset += prop[1]\n\n    const value = expectType(str, cache)\n    str = str.substr(value[1])\n    totalOffset += value[1]\n\n    obj[prop[0]] = value[0]\n  }\n\n  // strict parsing, expect } after object literal\n  if (str.charAt(0) !== '}') {\n    throw SyntaxError('Expected }')\n  }\n\n  return [obj, totalOffset + 1] // skip final }\n}\n\nfunction expectClass(str, cache) {\n  // can't be well supported, because requires calling eval (or similar)\n  // in order to call serialized constructor name\n  // which is unsafe\n  // or assume that constructor is defined in global scope\n  // but this is too much limiting\n  throw Error('Not yet implemented')\n}\n\nfunction expectReference(str, cache) {\n  const reRef = /^[rR]:([1-9]\\d*);/\n  const [match, refIndex] = reRef.exec(str) || []\n\n  if (!match) {\n    throw SyntaxError('Expected reference value')\n  }\n\n  return [cache.get(parseInt(refIndex, 10) - 1), match.length]\n}\n\nfunction expectArray(str, cache) {\n  const reArrayLength = /^a:(\\d+):{/\n  const [arrayLiteralBeginMatch, arrayLengthMatch] = reArrayLength.exec(str) || []\n\n  if (!arrayLengthMatch) {\n    throw SyntaxError('Expected array length annotation')\n  }\n\n  str = str.substr(arrayLiteralBeginMatch.length)\n\n  const array = expectArrayItems(str, parseInt(arrayLengthMatch, 10), cache)\n\n  // strict parsing, expect closing } brace after array literal\n  if (str.charAt(array[1]) !== '}') {\n    throw SyntaxError('Expected }')\n  }\n\n  return [array[0], arrayLiteralBeginMatch.length + array[1] + 1] // jump over }\n}\n\nfunction expectArrayItems(str, expectedItems = 0, cache) {\n  let key\n  let item\n  let totalOffset = 0\n  let hasContinousIndexes = true\n  let lastIndex = -1\n  let items = {}\n  cache([items])\n\n  for (let i = 0; i < expectedItems; i++) {\n    key = expectKeyOrIndex(str)\n\n    hasContinousIndexes = hasContinousIndexes && typeof key[0] === 'number' && key[0] === lastIndex + 1\n    lastIndex = key[0]\n\n    str = str.substr(key[1])\n    totalOffset += key[1]\n\n    // references are resolved immediately, so if duplicate key overwrites previous array index\n    // the old value is anyway resolved\n    // fixme: but next time the same reference should point to the new value\n    item = expectType(str, cache)\n    str = str.substr(item[1])\n    totalOffset += item[1]\n\n    items[key[0]] = item[0]\n  }\n\n  if (hasContinousIndexes) {\n    items = Object.values(items)\n  }\n\n  return [items, totalOffset]\n}\n\nmodule.exports = function unserialize(str) {\n  //       discuss at: https://locutus.io/php/unserialize/\n  //      original by: Arpad Ray (mailto:arpad@php.net)\n  //      improved by: Pedro Tainha (https://www.pedrotainha.com)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      improved by: Chris\n  //      improved by: James\n  //      improved by: Le Torbi\n  //      improved by: Eli Skeggs\n  //      bugfixed by: dptr1988\n  //      bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      bugfixed by: philippsimon (https://github.com/philippsimon/)\n  //       revised by: d3x\n  //         input by: Brett Zamir (https://brett-zamir.me)\n  //         input by: Martin (https://www.erlenwiese.de/)\n  //         input by: kilops\n  //         input by: Jaroslaw Czarniak\n  //         input by: lovasoa (https://github.com/lovasoa/)\n  //      improved by: Rafał Kukawski\n  // reimplemented by: Rafał Kukawski\n  //           note 1: We feel the main purpose of this function should be\n  //           note 1: to ease the transport of data between php & js\n  //           note 1: Aiming for PHP-compatibility, we have to translate objects to arrays\n  //        example 1: unserialize('a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}')\n  //        returns 1: ['Kevin', 'van', 'Zonneveld']\n  //        example 2: unserialize('a:2:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";}')\n  //        returns 2: {firstName: 'Kevin', midName: 'van'}\n  //        example 3: unserialize('a:3:{s:2:\"ü\";s:2:\"ü\";s:3:\"四\";s:3:\"四\";s:4:\"𠜎\";s:4:\"𠜎\";}')\n  //        returns 3: {'ü': 'ü', '四': '四', '𠜎': '𠜎'}\n  //        example 4: unserialize(undefined)\n  //        returns 4: false\n  //        example 5: unserialize('O:8:\"stdClass\":1:{s:3:\"foo\";b:1;}')\n  //        returns 5: { foo: true }\n  //        example 6: unserialize('a:2:{i:0;N;i:1;s:0:\"\";}')\n  //        returns 6: [null, \"\"]\n  //        example 7: unserialize('S:7:\"\\\\65\\\\73\\\\63\\\\61\\\\70\\\\65\\\\64\";')\n  //        returns 7: 'escaped'\n\n  try {\n    if (typeof str !== 'string') {\n      return false\n    }\n\n    return expectType(str, initCache())[0]\n  } catch (err) {\n    console.error(err)\n    return false\n  }\n}\n"]}