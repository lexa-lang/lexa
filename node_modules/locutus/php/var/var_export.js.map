{"version":3,"sources":["../../../src/php/var/var_export.js"],"names":["module","exports","var_export","mixedExpression","boolReturn","echo","require","retstr","iret","value","cnt","x","i","funcParts","idtLevel","arguments","innerIndent","outerIndent","getFuncName","fn","name","exec","_isNormalInteger","string","number","Math","floor","Number","Infinity","String","_makeIndent","Array","join","__getType","inp","match","types","cons","type","constructor","toString","toLowerCase","length","subtype","replace"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,eAApB,EAAqCC,UAArC,EAAiD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAOC,QAAQ,iBAAR,CAAb;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,OAAO,EAAX;AACA,MAAIC,cAAJ;AACA,MAAIC,MAAM,CAAV;AACA,MAAMC,IAAI,EAAV;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,YAAY,EAAhB;AACA;AACA;AACA,MAAMC,WAAWC,UAAU,CAAV,KAAgB,CAAjC;AACA,MAAIC,cAAc,EAAlB;AACA,MAAIC,cAAc,EAAlB;AACA,MAAMC,cAAc,SAAdA,WAAc,CAAUC,EAAV,EAAc;AAChC,QAAMC,OAAO,8BAA8BC,IAA9B,CAAmCF,EAAnC,CAAb;AACA,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,aAAP;AACD;AACD,WAAOA,KAAK,CAAL,CAAP;AACD,GAND;;AAQA,MAAME,mBAAmB,SAAnBA,gBAAmB,CAAUC,MAAV,EAAkB;AACzC,QAAMC,SAASC,KAAKC,KAAL,CAAWC,OAAOJ,MAAP,CAAX,CAAf;AACA,WAAOC,WAAWI,QAAX,IAAuBC,OAAOL,MAAP,MAAmBD,MAA1C,IAAoDC,UAAU,CAArE;AACD,GAHD;;AAKA,MAAMM,cAAc,SAAdA,WAAc,CAAUhB,QAAV,EAAoB;AACtC,WAAO,IAAIiB,KAAJ,CAAUjB,WAAW,CAArB,EAAwBkB,IAAxB,CAA6B,GAA7B,CAAP;AACD,GAFD;AAGA,MAAMC,YAAY,SAAZA,SAAY,CAAUC,GAAV,EAAe;AAC/B,QAAItB,IAAI,CAAR;AACA,QAAIuB,cAAJ;AACA,QAAIC,cAAJ;AACA,QAAIC,aAAJ;AACA,QAAIC,cAAcJ,GAAd,yCAAcA,GAAd,CAAJ;AACA,QAAII,SAAS,QAAT,IAAqBJ,GAArB,IAA4BA,IAAIK,WAAhC,IAA+CrB,YAAYgB,IAAIK,WAAhB,MAAiC,kBAApF,EAAwG;AACtG,aAAO,UAAP;AACD;AACD,QAAID,SAAS,UAAb,EAAyB;AACvB,aAAO,UAAP;AACD;AACD,QAAIA,SAAS,QAAT,IAAqB,CAACJ,GAA1B,EAA+B;AAC7B;AACA,aAAO,MAAP;AACD;AACD,QAAII,SAAS,QAAb,EAAuB;AACrB,UAAI,CAACJ,IAAIK,WAAT,EAAsB;AACpB,eAAO,QAAP;AACD;AACDF,aAAOH,IAAIK,WAAJ,CAAgBC,QAAhB,EAAP;AACAL,cAAQE,KAAKF,KAAL,CAAW,SAAX,CAAR;AACA,UAAIA,KAAJ,EAAW;AACTE,eAAOF,MAAM,CAAN,EAASM,WAAT,EAAP;AACD;AACDL,cAAQ,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,EAAgC,OAAhC,CAAR;AACA,WAAKxB,IAAI,CAAT,EAAYA,IAAIwB,MAAMM,MAAtB,EAA8B9B,GAA9B,EAAmC;AACjC,YAAIyB,SAASD,MAAMxB,CAAN,CAAb,EAAuB;AACrB0B,iBAAOF,MAAMxB,CAAN,CAAP;AACA;AACD;AACF;AACF;AACD,WAAO0B,IAAP;AACD,GAlCD;AAmCA,MAAMA,OAAOL,UAAU9B,eAAV,CAAb;;AAEA,MAAImC,SAAS,IAAb,EAAmB;AACjB/B,aAAS,MAAT;AACD,GAFD,MAEO,IAAI+B,SAAS,OAAT,IAAoBA,SAAS,QAAjC,EAA2C;AAChDrB,kBAAca,YAAYhB,WAAW,CAAvB,CAAd;AACAE,kBAAcc,YAAYhB,QAAZ,CAAd;AACA,SAAKF,CAAL,IAAUT,eAAV,EAA2B;AACzBM,cAAQ,GAAR;AACA,UAAMkC,UAAUV,UAAU9B,gBAAgBS,CAAhB,CAAV,CAAhB;AACA,UAAI+B,YAAY,OAAZ,IAAuBA,YAAY,QAAvC,EAAiD;AAC/ClC,gBAAQ,IAAR;AACD;AACDA,eAASP,WAAWC,gBAAgBS,CAAhB,CAAX,EAA+B,CAA/B,EAAkCE,WAAW,CAA7C,CAAT;AACAF,UAAIU,iBAAiBV,CAAjB,IAAsBA,CAAtB,UAA8BA,CAA9B,OAAJ;AACAD,QAAED,KAAF,IAAWM,cAAcJ,CAAd,GAAkB,KAAlB,GAA0BH,KAArC;AACD;AACD,QAAIE,EAAE+B,MAAF,GAAW,CAAf,EAAkB;AAChBlC,aAAOG,EAAEqB,IAAF,CAAO,KAAP,IAAgB,KAAvB;AACD;AACDzB,aAASU,cAAc,WAAd,GAA4BT,IAA5B,GAAmCS,WAAnC,GAAiD,GAA1D;AACD,GAjBM,MAiBA,IAAIqB,SAAS,UAAb,EAAyB;AAC9BzB,gBAAYV,gBAAgBqC,QAAhB,GAA2BL,KAA3B,CAAiC,qCAAjC,CAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,aAAS,uBAAuBM,UAAU,CAAV,CAAvB,GAAsC,MAAtC,GAA+CA,UAAU,CAAV,EAAa+B,OAAb,CAAqB,IAArB,EAA2B,KAA3B,CAA/C,GAAmF,IAA5F;AACD,GAXM,MAWA,IAAIN,SAAS,UAAb,EAAyB;AAC9B;AACA/B,aAAS,MAAT;AACD,GAHM,MAGA;AACLA,aACE,OAAOJ,eAAP,KAA2B,QAA3B,GACIA,eADJ,GAEI,MAAMA,gBAAgByC,OAAhB,CAAwB,SAAxB,EAAmC,MAAnC,EAA2CA,OAA3C,CAAmD,KAAnD,EAA0D,KAA1D,CAAN,GAAyE,GAH/E;AAID;;AAED,MAAI,CAACxC,UAAL,EAAiB;AACfC,SAAKE,MAAL;AACA,WAAO,IAAP;AACD;;AAED,SAAOA,MAAP;AACD,CA1ID","file":"var_export.js","sourcesContent":["module.exports = function var_export(mixedExpression, boolReturn) {\n  //  discuss at: https://locutus.io/php/var_export/\n  // original by: Philip Peterson\n  // improved by: johnrembo\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  //    input by: Brian Tafoya (https://www.premasolutions.com/)\n  //    input by: Hans Henrik (https://hanshenrik.tk/)\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: simivar (https://github.com/simivar)\n  // bugfixed by: simivar (https://github.com/simivar)\n  // bugfixed by: simivar (https://github.com/simivar)\n  //   example 1: var_export(null)\n  //   returns 1: null\n  //   example 2: var_export({0: 'Kevin', 1: 'van', 2: 'Zonneveld'}, true)\n  //   returns 2: \"array (\\n  0 => 'Kevin',\\n  1 => 'van',\\n  2 => 'Zonneveld',\\n)\"\n  //   example 3: var data = 'Kevin'\n  //   example 3: var_export(data, true)\n  //   returns 3: \"'Kevin'\"\n  //   example 4: var_export({0: 'Kevin', 1: 'van', 'lastName': 'Zonneveld'}, true)\n  //   returns 4: \"array (\\n  0 => 'Kevin',\\n  1 => 'van',\\n  'lastName' => 'Zonneveld',\\n)\"\n  //   example 5: var_export([], true)\n  //   returns 5: \"array (\\n)\"\n  //   example 6: var_export({ test: [ 'a', 'b' ] }, true)\n  //   returns 6: \"array (\\n  'test' =>\\n  array (\\n    0 => 'a',\\n    1 => 'b',\\n  ),\\n)\"\n\n  const echo = require('../strings/echo')\n  let retstr = ''\n  let iret = ''\n  let value\n  let cnt = 0\n  const x = []\n  let i = 0\n  let funcParts = []\n  // We use the last argument (not part of PHP) to pass in\n  // our indentation level\n  const idtLevel = arguments[2] || 2\n  let innerIndent = ''\n  let outerIndent = ''\n  const getFuncName = function (fn) {\n    const name = /\\W*function\\s+([\\w$]+)\\s*\\(/.exec(fn)\n    if (!name) {\n      return '(Anonymous)'\n    }\n    return name[1]\n  }\n\n  const _isNormalInteger = function (string) {\n    const number = Math.floor(Number(string))\n    return number !== Infinity && String(number) === string && number >= 0\n  }\n\n  const _makeIndent = function (idtLevel) {\n    return new Array(idtLevel + 1).join(' ')\n  }\n  const __getType = function (inp) {\n    let i = 0\n    let match\n    let types\n    let cons\n    let type = typeof inp\n    if (type === 'object' && inp && inp.constructor && getFuncName(inp.constructor) === 'LOCUTUS_Resource') {\n      return 'resource'\n    }\n    if (type === 'function') {\n      return 'function'\n    }\n    if (type === 'object' && !inp) {\n      // Should this be just null?\n      return 'null'\n    }\n    if (type === 'object') {\n      if (!inp.constructor) {\n        return 'object'\n      }\n      cons = inp.constructor.toString()\n      match = cons.match(/(\\w+)\\(/)\n      if (match) {\n        cons = match[1].toLowerCase()\n      }\n      types = ['boolean', 'number', 'string', 'array']\n      for (i = 0; i < types.length; i++) {\n        if (cons === types[i]) {\n          type = types[i]\n          break\n        }\n      }\n    }\n    return type\n  }\n  const type = __getType(mixedExpression)\n\n  if (type === null) {\n    retstr = 'NULL'\n  } else if (type === 'array' || type === 'object') {\n    outerIndent = _makeIndent(idtLevel - 2)\n    innerIndent = _makeIndent(idtLevel)\n    for (i in mixedExpression) {\n      value = ' '\n      const subtype = __getType(mixedExpression[i])\n      if (subtype === 'array' || subtype === 'object') {\n        value = '\\n'\n      }\n      value += var_export(mixedExpression[i], 1, idtLevel + 2)\n      i = _isNormalInteger(i) ? i : `'${i}'`\n      x[cnt++] = innerIndent + i + ' =>' + value\n    }\n    if (x.length > 0) {\n      iret = x.join(',\\n') + ',\\n'\n    }\n    retstr = outerIndent + 'array (\\n' + iret + outerIndent + ')'\n  } else if (type === 'function') {\n    funcParts = mixedExpression.toString().match(/function .*?\\((.*?)\\) \\{([\\s\\S]*)\\}/)\n\n    // For lambda functions, var_export() outputs such as the following:\n    // '\\000lambda_1'. Since it will probably not be a common use to\n    // expect this (unhelpful) form, we'll use another PHP-exportable\n    // construct, create_function() (though dollar signs must be on the\n    // variables in JavaScript); if using instead in JavaScript and you\n    // are using the namespaced version, note that create_function() will\n    // not be available as a global\n    retstr = \"create_function ('\" + funcParts[1] + \"', '\" + funcParts[2].replace(/'/g, \"\\\\'\") + \"')\"\n  } else if (type === 'resource') {\n    // Resources treated as null for var_export\n    retstr = 'NULL'\n  } else {\n    retstr =\n      typeof mixedExpression !== 'string'\n        ? mixedExpression\n        : \"'\" + mixedExpression.replace(/([\"'])/g, '\\\\$1').replace(/\\0/g, '\\\\0') + \"'\"\n  }\n\n  if (!boolReturn) {\n    echo(retstr)\n    return null\n  }\n\n  return retstr\n}\n"]}