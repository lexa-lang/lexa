{"version":3,"sources":["../../../src/php/var/is_callable.js"],"names":["module","exports","is_callable","mixedVar","syntaxOnly","callableName","$global","window","global","validJSFunctionNamePattern","name","obj","method","validFunctionName","getFuncName","fn","exec","test","toString","match","Object","prototype","call","length","constructor","eval"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,YAA3C,EAAyD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAzD;;AAEA,MAAMC,6BAA6B,kDAAnC;;AAEA,MAAIC,OAAO,EAAX;AACA,MAAIC,MAAM,EAAV;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,oBAAoB,KAAxB;;AAEA,MAAMC,cAAc,SAAdA,WAAc,CAAUC,EAAV,EAAc;AAChC,QAAML,OAAO,8BAA8BM,IAA9B,CAAmCD,EAAnC,CAAb;AACA,QAAI,CAACL,IAAL,EAAW;AACT,aAAO,aAAP;AACD;AACD,WAAOA,KAAK,CAAL,CAAP;AACD,GAND;;AAQA;AACA,MAAI,oBAAoBO,IAApB,CAAyBd,SAASe,QAAT,EAAzB,CAAJ,EAAmD;AACjD,WAAO,KAAP;AACD;;AAED,MAAI,OAAOf,QAAP,KAAoB,QAAxB,EAAkC;AAChCQ,UAAML,OAAN;AACAM,aAAST,QAAT;AACAO,WAAOP,QAAP;AACAU,wBAAoB,CAAC,CAACH,KAAKS,KAAL,CAAWV,0BAAX,CAAtB;AACD,GALD,MAKO,IAAI,OAAON,QAAP,KAAoB,UAAxB,EAAoC;AACzC,WAAO,IAAP;AACD,GAFM,MAEA,IACLiB,OAAOC,SAAP,CAAiBH,QAAjB,CAA0BI,IAA1B,CAA+BnB,QAA/B,MAA6C,gBAA7C,IACAA,SAASoB,MAAT,KAAoB,CADpB,IAEA,QAAOpB,SAAS,CAAT,CAAP,MAAuB,QAFvB,IAGA,OAAOA,SAAS,CAAT,CAAP,KAAuB,QAJlB,EAKL;AACAQ,UAAMR,SAAS,CAAT,CAAN;AACAS,aAAST,SAAS,CAAT,CAAT;AACAO,WAAO,CAACC,IAAIa,WAAJ,IAAmBV,YAAYH,IAAIa,WAAhB,CAApB,IAAoD,IAApD,GAA2DZ,MAAlE;AACD;;AAED,MAAIR,cAAc,OAAOO,IAAIC,MAAJ,CAAP,KAAuB,UAAzC,EAAqD;AACnD,QAAIP,YAAJ,EAAkB;AAChBC,cAAQD,YAAR,IAAwBK,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;AAED;AACA;AACA,MAAIG,qBAAqB,OAAOY,KAAKb,MAAL,CAAP,KAAwB,UAAjD,EAA6D;AAC3D,QAAIP,YAAJ,EAAkB;AAChBC,cAAQD,YAAR,IAAwBK,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAzFD","file":"is_callable.js","sourcesContent":["module.exports = function is_callable(mixedVar, syntaxOnly, callableName) {\n  //  discuss at: https://locutus.io/php/is_callable/\n  // original by: Brett Zamir (https://brett-zamir.me)\n  //    input by: Fran√ßois\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: KnightYoshi\n  // improved by: Waldo Malqui Silva (https://fayr.us/waldo/)\n  //      note 1: The variable callableName cannot work as a string variable passed by\n  //      note 1: reference as in PHP (since JavaScript does not support passing\n  //      note 1: strings by reference), but instead will take the name of\n  //      note 1: a global variable and set that instead.\n  //      note 1: When used on an object, depends on a constructor property\n  //      note 1: being kept on the object prototype\n  //      note 2: Depending on the `callableName` that is passed, this function can use eval.\n  //      note 2: The eval input is however checked to only allow valid function names,\n  //      note 2: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 2: already pass any function to be executed here.\n  //   example 1: is_callable('is_callable')\n  //   returns 1: true\n  //   example 2: is_callable('bogusFunction', true)\n  //   returns 2: true // gives true because does not do strict checking\n  //   example 3: function SomeClass () {}\n  //   example 3: SomeClass.prototype.someMethod = function (){}\n  //   example 3: var testObj = new SomeClass()\n  //   example 3: is_callable([testObj, 'someMethod'], true, 'myVar')\n  //   example 3: var $result = myVar\n  //   returns 3: 'SomeClass::someMethod'\n  //   example 4: is_callable(function () {})\n  //   returns 4: true\n  //   example 5: is_callable(class MyClass {})\n  //   returns 5: false\n\n  const $global = typeof window !== 'undefined' ? window : global\n\n  const validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\n\n  let name = ''\n  let obj = {}\n  let method = ''\n  let validFunctionName = false\n\n  const getFuncName = function (fn) {\n    const name = /\\W*function\\s+([\\w$]+)\\s*\\(/.exec(fn)\n    if (!name) {\n      return '(Anonymous)'\n    }\n    return name[1]\n  }\n\n  // eslint-disable-next-line no-useless-escape\n  if (/(^class|\\(this\\,)/.test(mixedVar.toString())) {\n    return false\n  }\n\n  if (typeof mixedVar === 'string') {\n    obj = $global\n    method = mixedVar\n    name = mixedVar\n    validFunctionName = !!name.match(validJSFunctionNamePattern)\n  } else if (typeof mixedVar === 'function') {\n    return true\n  } else if (\n    Object.prototype.toString.call(mixedVar) === '[object Array]' &&\n    mixedVar.length === 2 &&\n    typeof mixedVar[0] === 'object' &&\n    typeof mixedVar[1] === 'string'\n  ) {\n    obj = mixedVar[0]\n    method = mixedVar[1]\n    name = (obj.constructor && getFuncName(obj.constructor)) + '::' + method\n  }\n\n  if (syntaxOnly || typeof obj[method] === 'function') {\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  // validFunctionName avoids exploits\n  // eslint-disable-next-line no-eval\n  if (validFunctionName && typeof eval(method) === 'function') {\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  return false\n}\n"]}