{"version":3,"sources":["../../../src/php/datetime/mktime.js"],"names":["module","exports","mktime","d","Date","r","arguments","i","e","length","parseInt","isNaN","setFullYear","setHours","time","getTime"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,MAAT,GAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,IAAIC,IAAJ,EAAV;AACA,MAAMC,IAAIC,SAAV;AACA,MAAIC,IAAI,CAAR;AACA,MAAMC,IAAI,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,EAAgC,OAAhC,EAAyC,MAAzC,EAAiD,UAAjD,CAAV;;AAEA,OAAKD,IAAI,CAAT,EAAYA,IAAIC,EAAEC,MAAlB,EAA0BF,GAA1B,EAA+B;AAC7B,QAAI,OAAOF,EAAEE,CAAF,CAAP,KAAgB,WAApB,EAAiC;AAC/BF,QAAEE,CAAF,IAAOJ,EAAE,QAAQK,EAAED,CAAF,CAAV,GAAP;AACA;AACAF,QAAEE,CAAF,KAAQA,MAAM,CAAd;AACD,KAJD,MAIO;AACLF,QAAEE,CAAF,IAAOG,SAASL,EAAEE,CAAF,CAAT,EAAe,EAAf,CAAP;AACA,UAAII,MAAMN,EAAEE,CAAF,CAAN,CAAJ,EAAiB;AACf,eAAO,KAAP;AACD;AACF;AACF;;AAED;AACAF,IAAE,CAAF,KAAQA,EAAE,CAAF,KAAQ,CAAR,GAAaA,EAAE,CAAF,KAAQ,EAAR,GAAa,GAAb,GAAmBA,EAAE,CAAF,KAAQ,GAAR,GAAc,IAAd,GAAqB,CAArD,GAA0D,CAAlE;;AAEA;AACA;AACAF,IAAES,WAAF,CAAcP,EAAE,CAAF,CAAd,EAAoBA,EAAE,CAAF,IAAO,CAA3B,EAA8BA,EAAE,CAAF,CAA9B;;AAEA;AACAF,IAAEU,QAAF,CAAWR,EAAE,CAAF,CAAX,EAAiBA,EAAE,CAAF,CAAjB,EAAuBA,EAAE,CAAF,CAAvB;;AAEA,MAAMS,OAAOX,EAAEY,OAAF,EAAb;;AAEA;AACA;AACA,SAAO,CAAED,OAAO,GAAR,IAAgB,CAAjB,KAAuBA,OAAO,CAA9B,CAAP;AACD,CAzED","file":"mktime.js","sourcesContent":["module.exports = function mktime() {\n  //  discuss at: https://locutus.io/php/mktime/\n  // original by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: baris ozdil\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: FGFEmperor\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  //    input by: gabriel paderni\n  //    input by: Yannoo\n  //    input by: jakes\n  //    input by: 3D-GRAF\n  //    input by: Chris\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Marc Palau\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //  revised by: Theriault (https://github.com/Theriault)\n  //      note 1: The return values of the following examples are\n  //      note 1: received only if your system's timezone is UTC.\n  //   example 1: mktime(14, 10, 2, 2, 1, 2008)\n  //   returns 1: 1201875002\n  //   example 2: mktime(0, 0, 0, 0, 1, 2008)\n  //   returns 2: 1196467200\n  //   example 3: var $make = mktime()\n  //   example 3: var $td = new Date()\n  //   example 3: var $real = Math.floor($td.getTime() / 1000)\n  //   example 3: var $diff = ($real - $make)\n  //   example 3: $diff < 5\n  //   returns 3: true\n  //   example 4: mktime(0, 0, 0, 13, 1, 1997)\n  //   returns 4: 883612800\n  //   example 5: mktime(0, 0, 0, 1, 1, 1998)\n  //   returns 5: 883612800\n  //   example 6: mktime(0, 0, 0, 1, 1, 98)\n  //   returns 6: 883612800\n  //   example 7: mktime(23, 59, 59, 13, 0, 2010)\n  //   returns 7: 1293839999\n  //   example 8: mktime(0, 0, -1, 1, 1, 1970)\n  //   returns 8: -1\n\n  const d = new Date()\n  const r = arguments\n  let i = 0\n  const e = ['Hours', 'Minutes', 'Seconds', 'Month', 'Date', 'FullYear']\n\n  for (i = 0; i < e.length; i++) {\n    if (typeof r[i] === 'undefined') {\n      r[i] = d['get' + e[i]]()\n      // +1 to fix JS months.\n      r[i] += i === 3\n    } else {\n      r[i] = parseInt(r[i], 10)\n      if (isNaN(r[i])) {\n        return false\n      }\n    }\n  }\n\n  // Map years 0-69 to 2000-2069 and years 70-100 to 1970-2000.\n  r[5] += r[5] >= 0 ? (r[5] <= 69 ? 2e3 : r[5] <= 100 ? 1900 : 0) : 0\n\n  // Set year, month (-1 to fix JS months), and date.\n  // !This must come before the call to setHours!\n  d.setFullYear(r[5], r[3] - 1, r[4])\n\n  // Set hours, minutes, and seconds.\n  d.setHours(r[0], r[1], r[2])\n\n  const time = d.getTime()\n\n  // Divide milliseconds by 1000 to return seconds and drop decimal.\n  // Add 1 second if negative or it'll be off from PHP by 1 second.\n  return ((time / 1e3) >> 0) - (time < 0)\n}\n"]}