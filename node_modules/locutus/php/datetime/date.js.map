{"version":3,"sources":["../../../src/php/datetime/date.js"],"names":["module","exports","date","format","timestamp","jsdate","f","txtWords","formatChr","formatChrCb","t","s","_pad","n","c","String","length","d","j","D","l","slice","getDate","w","N","S","i","parseInt","getDay","z","a","Date","Y","b","Math","round","W","getFullYear","F","m","M","getMonth","L","o","y","toString","getHours","A","toUpperCase","B","H","getUTCHours","getUTCMinutes","getUTCSeconds","floor","g","G","h","getMinutes","getSeconds","u","getMilliseconds","e","msg","Error","I","UTC","O","tzo","getTimezoneOffset","abs","P","substr","T","Z","replace","r","U","_date","undefined"],"mappings":"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","file":"date.js","sourcesContent":["module.exports = function date(format, timestamp) {\n  //  discuss at: https://locutus.io/php/date/\n  // original by: Carlos R. L. Rodrigues (https://www.jsfromhell.com)\n  // original by: gettimeofday\n  //    parts by: Peter-Paul Koch (https://www.quirksmode.org/js/beat.html)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: MeEtc (https://yass.meetcweb.com)\n  // improved by: Brad Touesnard\n  // improved by: Tim Wiel\n  // improved by: Bryan Elliott\n  // improved by: David Randall\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Thomas Beaucourt (https://www.webapp.fr)\n  // improved by: JT\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Rafa≈Ç Kukawski (https://blog.kukawski.pl)\n  // improved by: Theriault (https://github.com/Theriault)\n  //    input by: Brett Zamir (https://brett-zamir.me)\n  //    input by: majak\n  //    input by: Alex\n  //    input by: Martin\n  //    input by: Alex Wilson\n  //    input by: Haravikk\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: majak\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: omid (https://locutus.io/php/380:380#comment_137122)\n  // bugfixed by: Chris (https://www.devotis.nl/)\n  //      note 1: Uses global: locutus to store the default timezone\n  //      note 1: Although the function potentially allows timezone info\n  //      note 1: (see notes), it currently does not set\n  //      note 1: per a timezone specified by date_default_timezone_set(). Implementers might use\n  //      note 1: $locutus.currentTimezoneOffset and\n  //      note 1: $locutus.currentTimezoneDST set by that function\n  //      note 1: in order to adjust the dates in this function\n  //      note 1: (or our other date functions!) accordingly\n  //   example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)\n  //   returns 1: '07:09:40 m is month'\n  //   example 2: date('F j, Y, g:i a', 1062462400)\n  //   returns 2: 'September 2, 2003, 12:26 am'\n  //   example 3: date('Y W o', 1062462400)\n  //   returns 3: '2003 36 2003'\n  //   example 4: var $x = date('Y m d', (new Date()).getTime() / 1000)\n  //   example 4: $x = $x + ''\n  //   example 4: var $result = $x.length // 2009 01 09\n  //   returns 4: 10\n  //   example 5: date('W', 1104534000)\n  //   returns 5: '52'\n  //   example 6: date('B t', 1104534000)\n  //   returns 6: '999 31'\n  //   example 7: date('W U', 1293750000.82); // 2010-12-31\n  //   returns 7: '52 1293750000'\n  //   example 8: date('W', 1293836400); // 2011-01-01\n  //   returns 8: '52'\n  //   example 9: date('W Y-m-d', 1293974054); // 2011-01-02\n  //   returns 9: '52 2011-01-02'\n  //        test: skip-1 skip-2 skip-5\n\n  let jsdate, f\n  // Keep this here (works, but for code commented-out below for file size reasons)\n  // var tal= [];\n  const txtWords = [\n    'Sun',\n    'Mon',\n    'Tues',\n    'Wednes',\n    'Thurs',\n    'Fri',\n    'Satur',\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ]\n  // trailing backslash -> (dropped)\n  // a backslash followed by any character (including backslash) -> the character\n  // empty string -> empty string\n  const formatChr = /\\\\?(.?)/gi\n  const formatChrCb = function (t, s) {\n    return f[t] ? f[t]() : s\n  }\n  const _pad = function (n, c) {\n    n = String(n)\n    while (n.length < c) {\n      n = '0' + n\n    }\n    return n\n  }\n  f = {\n    // Day\n    d: function () {\n      // Day of month w/leading 0; 01..31\n      return _pad(f.j(), 2)\n    },\n    D: function () {\n      // Shorthand day name; Mon...Sun\n      return f.l().slice(0, 3)\n    },\n    j: function () {\n      // Day of month; 1..31\n      return jsdate.getDate()\n    },\n    l: function () {\n      // Full day name; Monday...Sunday\n      return txtWords[f.w()] + 'day'\n    },\n    N: function () {\n      // ISO-8601 day of week; 1[Mon]..7[Sun]\n      return f.w() || 7\n    },\n    S: function () {\n      // Ordinal suffix for day of month; st, nd, rd, th\n      const j = f.j()\n      let i = j % 10\n      if (i <= 3 && parseInt((j % 100) / 10, 10) === 1) {\n        i = 0\n      }\n      return ['st', 'nd', 'rd'][i - 1] || 'th'\n    },\n    w: function () {\n      // Day of week; 0[Sun]..6[Sat]\n      return jsdate.getDay()\n    },\n    z: function () {\n      // Day of year; 0..365\n      const a = new Date(f.Y(), f.n() - 1, f.j())\n      const b = new Date(f.Y(), 0, 1)\n      return Math.round((a - b) / 864e5)\n    },\n\n    // Week\n    W: function () {\n      // ISO-8601 week number\n      const a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3)\n      const b = new Date(a.getFullYear(), 0, 4)\n      return _pad(1 + Math.round((a - b) / 864e5 / 7), 2)\n    },\n\n    // Month\n    F: function () {\n      // Full month name; January...December\n      return txtWords[6 + f.n()]\n    },\n    m: function () {\n      // Month w/leading 0; 01...12\n      return _pad(f.n(), 2)\n    },\n    M: function () {\n      // Shorthand month name; Jan...Dec\n      return f.F().slice(0, 3)\n    },\n    n: function () {\n      // Month; 1...12\n      return jsdate.getMonth() + 1\n    },\n    t: function () {\n      // Days in month; 28...31\n      return new Date(f.Y(), f.n(), 0).getDate()\n    },\n\n    // Year\n    L: function () {\n      // Is leap year?; 0 or 1\n      const j = f.Y()\n      return ((j % 4 === 0) & (j % 100 !== 0)) | (j % 400 === 0)\n    },\n    o: function () {\n      // ISO-8601 year\n      const n = f.n()\n      const W = f.W()\n      const Y = f.Y()\n      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0)\n    },\n    Y: function () {\n      // Full year; e.g. 1980...2010\n      return jsdate.getFullYear()\n    },\n    y: function () {\n      // Last two digits of year; 00...99\n      return f.Y().toString().slice(-2)\n    },\n\n    // Time\n    a: function () {\n      // am or pm\n      return jsdate.getHours() > 11 ? 'pm' : 'am'\n    },\n    A: function () {\n      // AM or PM\n      return f.a().toUpperCase()\n    },\n    B: function () {\n      // Swatch Internet time; 000..999\n      const H = jsdate.getUTCHours() * 36e2\n      // Hours\n      const i = jsdate.getUTCMinutes() * 60\n      // Minutes\n      // Seconds\n      const s = jsdate.getUTCSeconds()\n      return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3)\n    },\n    g: function () {\n      // 12-Hours; 1..12\n      return f.G() % 12 || 12\n    },\n    G: function () {\n      // 24-Hours; 0..23\n      return jsdate.getHours()\n    },\n    h: function () {\n      // 12-Hours w/leading 0; 01..12\n      return _pad(f.g(), 2)\n    },\n    H: function () {\n      // 24-Hours w/leading 0; 00..23\n      return _pad(f.G(), 2)\n    },\n    i: function () {\n      // Minutes w/leading 0; 00..59\n      return _pad(jsdate.getMinutes(), 2)\n    },\n    s: function () {\n      // Seconds w/leading 0; 00..59\n      return _pad(jsdate.getSeconds(), 2)\n    },\n    u: function () {\n      // Microseconds; 000000-999000\n      return _pad(jsdate.getMilliseconds() * 1000, 6)\n    },\n\n    // Timezone\n    e: function () {\n      // Timezone identifier; e.g. Atlantic/Azores, ...\n      // The following works, but requires inclusion of the very large\n      // timezone_abbreviations_list() function.\n      /*              return that.date_default_timezone_get();\n       */\n      const msg = 'Not supported (see source code of date() for timezone on how to add support)'\n      throw new Error(msg)\n    },\n    I: function () {\n      // DST observed?; 0 or 1\n      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\n      // If they are not equal, then DST is observed.\n      const a = new Date(f.Y(), 0)\n      // Jan 1\n      const c = Date.UTC(f.Y(), 0)\n      // Jan 1 UTC\n      const b = new Date(f.Y(), 6)\n      // Jul 1\n      // Jul 1 UTC\n      const d = Date.UTC(f.Y(), 6)\n      return a - c !== b - d ? 1 : 0\n    },\n    O: function () {\n      // Difference to GMT in hour format; e.g. +0200\n      const tzo = jsdate.getTimezoneOffset()\n      const a = Math.abs(tzo)\n      return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + (a % 60), 4)\n    },\n    P: function () {\n      // Difference to GMT w/colon; e.g. +02:00\n      const O = f.O()\n      return O.substr(0, 3) + ':' + O.substr(3, 2)\n    },\n    T: function () {\n      // The following works, but requires inclusion of the very\n      // large timezone_abbreviations_list() function.\n      /*              var abbr, i, os, _default;\n      if (!tal.length) {\n        tal = that.timezone_abbreviations_list();\n      }\n      if ($locutus && $locutus.default_timezone) {\n        _default = $locutus.default_timezone;\n        for (abbr in tal) {\n          for (i = 0; i < tal[abbr].length; i++) {\n            if (tal[abbr][i].timezone_id === _default) {\n              return abbr.toUpperCase();\n            }\n          }\n        }\n      }\n      for (abbr in tal) {\n        for (i = 0; i < tal[abbr].length; i++) {\n          os = -jsdate.getTimezoneOffset() * 60;\n          if (tal[abbr][i].offset === os) {\n            return abbr.toUpperCase();\n          }\n        }\n      }\n      */\n      return 'UTC'\n    },\n    Z: function () {\n      // Timezone offset in seconds (-43200...50400)\n      return -jsdate.getTimezoneOffset() * 60\n    },\n\n    // Full Date/Time\n    c: function () {\n      // ISO-8601 date.\n      return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb)\n    },\n    r: function () {\n      // RFC 2822\n      return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb)\n    },\n    U: function () {\n      // Seconds since UNIX epoch\n      return (jsdate / 1000) | 0\n    },\n  }\n\n  const _date = function (format, timestamp) {\n    jsdate =\n      timestamp === undefined\n        ? new Date() // Not provided\n        : timestamp instanceof Date\n          ? new Date(timestamp) // JS Date()\n          : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)\n    return format.replace(formatChr, formatChrCb)\n  }\n\n  return _date(format, timestamp)\n}\n"]}