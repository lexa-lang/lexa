{"version":3,"sources":["../../../src/php/url/base64_decode.js"],"names":["module","exports","base64_decode","encodedData","decodeUTF8string","str","decodeURIComponent","split","map","c","charCodeAt","toString","slice","join","window","atob","Buffer","b64","o1","o2","o3","h1","h2","h3","h4","bits","i","ac","dec","tmpArr","indexOf","charAt","String","fromCharCode","length","replace"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,WAAvB,EAAoC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,mBAAmB,SAAnBA,gBAAmB,CAAUC,GAAV,EAAe;AACtC;AACA,WAAOC,mBACLD,IACGE,KADH,CACS,EADT,EAEGC,GAFH,CAEO,UAAUC,CAAV,EAAa;AAChB,aAAO,MAAM,CAAC,OAAOA,EAAEC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACD,KAJH,EAKGC,IALH,CAKQ,EALR,CADK,CAAP;AAQD,GAVD;;AAYA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAI,OAAOA,OAAOC,IAAd,KAAuB,WAA3B,EAAwC;AACtC,aAAOX,iBAAiBU,OAAOC,IAAP,CAAYZ,WAAZ,CAAjB,CAAP;AACD;AACF,GAJD,MAIO;AACL,WAAO,IAAIa,MAAJ,CAAWb,WAAX,EAAwB,QAAxB,EAAkCQ,QAAlC,CAA2C,OAA3C,CAAP;AACD;;AAED,MAAMM,MAAM,mEAAZ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,KAAK,CAAT;AACA,MAAIC,MAAM,EAAV;AACA,MAAMC,SAAS,EAAf;;AAEA,MAAI,CAAC1B,WAAL,EAAkB;AAChB,WAAOA,WAAP;AACD;;AAEDA,iBAAe,EAAf;;AAEA,KAAG;AACD;AACAkB,SAAKJ,IAAIa,OAAJ,CAAY3B,YAAY4B,MAAZ,CAAmBL,GAAnB,CAAZ,CAAL;AACAJ,SAAKL,IAAIa,OAAJ,CAAY3B,YAAY4B,MAAZ,CAAmBL,GAAnB,CAAZ,CAAL;AACAH,SAAKN,IAAIa,OAAJ,CAAY3B,YAAY4B,MAAZ,CAAmBL,GAAnB,CAAZ,CAAL;AACAF,SAAKP,IAAIa,OAAJ,CAAY3B,YAAY4B,MAAZ,CAAmBL,GAAnB,CAAZ,CAAL;;AAEAD,WAAQJ,MAAM,EAAP,GAAcC,MAAM,EAApB,GAA2BC,MAAM,CAAjC,GAAsCC,EAA7C;;AAEAN,SAAMO,QAAQ,EAAT,GAAe,IAApB;AACAN,SAAMM,QAAQ,CAAT,GAAc,IAAnB;AACAL,SAAKK,OAAO,IAAZ;;AAEA,QAAIF,OAAO,EAAX,EAAe;AACbM,aAAOF,IAAP,IAAeK,OAAOC,YAAP,CAAoBf,EAApB,CAAf;AACD,KAFD,MAEO,IAAIM,OAAO,EAAX,EAAe;AACpBK,aAAOF,IAAP,IAAeK,OAAOC,YAAP,CAAoBf,EAApB,EAAwBC,EAAxB,CAAf;AACD,KAFM,MAEA;AACLU,aAAOF,IAAP,IAAeK,OAAOC,YAAP,CAAoBf,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,CAAf;AACD;AACF,GApBD,QAoBSM,IAAIvB,YAAY+B,MApBzB;;AAsBAN,QAAMC,OAAOhB,IAAP,CAAY,EAAZ,CAAN;;AAEA,SAAOT,iBAAiBwB,IAAIO,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAjB,CAAP;AACD,CAvFD","file":"base64_decode.js","sourcesContent":["module.exports = function base64_decode(encodedData) {\n  //  discuss at: https://locutus.io/php/base64_decode/\n  // original by: Tyler Akins (https://rumkin.com)\n  // improved by: Thunder.m\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  //    input by: Aman Gupta\n  //    input by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Pellentesque Malesuada\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Indigo744\n  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==')\n  //   returns 1: 'Kevin van Zonneveld'\n  //   example 2: base64_decode('YQ==')\n  //   returns 2: 'a'\n  //   example 3: base64_decode('4pyTIMOgIGxhIG1vZGU=')\n  //   returns 3: '✓ à la mode'\n\n  // decodeUTF8string()\n  // Internal function to decode properly UTF8 string\n  // Adapted from Solution #1 at https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n  const decodeUTF8string = function (str) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(\n      str\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n        })\n        .join(''),\n    )\n  }\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.atob !== 'undefined') {\n      return decodeUTF8string(window.atob(encodedData))\n    }\n  } else {\n    return new Buffer(encodedData, 'base64').toString('utf-8')\n  }\n\n  const b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n  let o1\n  let o2\n  let o3\n  let h1\n  let h2\n  let h3\n  let h4\n  let bits\n  let i = 0\n  let ac = 0\n  let dec = ''\n  const tmpArr = []\n\n  if (!encodedData) {\n    return encodedData\n  }\n\n  encodedData += ''\n\n  do {\n    // unpack four hexets into three octets using index points in b64\n    h1 = b64.indexOf(encodedData.charAt(i++))\n    h2 = b64.indexOf(encodedData.charAt(i++))\n    h3 = b64.indexOf(encodedData.charAt(i++))\n    h4 = b64.indexOf(encodedData.charAt(i++))\n\n    bits = (h1 << 18) | (h2 << 12) | (h3 << 6) | h4\n\n    o1 = (bits >> 16) & 0xff\n    o2 = (bits >> 8) & 0xff\n    o3 = bits & 0xff\n\n    if (h3 === 64) {\n      tmpArr[ac++] = String.fromCharCode(o1)\n    } else if (h4 === 64) {\n      tmpArr[ac++] = String.fromCharCode(o1, o2)\n    } else {\n      tmpArr[ac++] = String.fromCharCode(o1, o2, o3)\n    }\n  } while (i < encodedData.length)\n\n  dec = tmpArr.join('')\n\n  return decodeUTF8string(dec.replace(/\\0+$/, ''))\n}\n"]}