{"version":3,"sources":["../../../src/php/filesystem/realpath.js"],"names":["module","exports","realpath","path","window","nodePath","require","normalize","p","arr","r","location","href","replace","indexOf","substring","lastIndexOf","split","k","length","pop","push","join"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAMC,WAAWC,QAAQ,MAAR,CAAjB;AACA,WAAOD,SAASE,SAAT,CAAmBJ,IAAnB,CAAP;AACD;;AAED,MAAIK,IAAI,CAAR;AACA,MAAIC,MAAM,EAAV,CAduC,CAc1B;AACb,MAAMC,IAAI,KAAKN,MAAL,CAAYO,QAAZ,CAAqBC,IAA/B,CAfuC,CAeH;;AAEpC;AACAT,SAAO,CAACA,OAAO,EAAR,EAAYU,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,CAAP;AACA,MAAIV,KAAKW,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AAC9BN,QAAI,CAAJ;AACD;;AAED;AACA,MAAI,CAACA,CAAL,EAAQ;AACNL,WAAOO,EAAEK,SAAF,CAAY,CAAZ,EAAeL,EAAEM,WAAF,CAAc,GAAd,IAAqB,CAApC,IAAyCb,IAAhD;AACD;;AAED;AACAM,QAAMN,KAAKc,KAAL,CAAW,GAAX,CAAN,CA7BuC,CA6BjB;AACtBd,SAAO,EAAP,CA9BuC,CA8B7B;AACV,OAAK,IAAMe,CAAX,IAAgBT,GAAhB,EAAqB;AACnB;AACA,QAAIA,IAAIS,CAAJ,MAAW,GAAf,EAAoB;AAClB;AACD;AACD;AACA,QAAIT,IAAIS,CAAJ,MAAW,IAAf,EAAqB;AACnB;;AAEA,UAAIf,KAAKgB,MAAL,GAAc,CAAlB,EAAqB;AACnBhB,aAAKiB,GAAL;AACD;AACF,KAND,MAMO;AACL;AACA;AACA;AACA;AACA,UAAIjB,KAAKgB,MAAL,GAAc,CAAd,IAAmBV,IAAIS,CAAJ,MAAW,EAAlC,EAAsC;AACpCf,aAAKkB,IAAL,CAAUZ,IAAIS,CAAJ,CAAV;AACD;AACF;AACF;;AAED;AACA,SAAOf,KAAKmB,IAAL,CAAU,GAAV,CAAP;AACD,CAxDD","file":"realpath.js","sourcesContent":["module.exports = function realpath(path) {\n  //  discuss at: https://locutus.io/php/realpath/\n  // original by: mk.keck\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  //      note 1: Returned path is an url like e.g. 'https://yourhost.tld/path/'\n  //   example 1: realpath('some/dir/.././_supporters/pj_test_supportfile_1.htm')\n  //   returns 1: 'some/_supporters/pj_test_supportfile_1.htm'\n\n  if (typeof window === 'undefined') {\n    const nodePath = require('path')\n    return nodePath.normalize(path)\n  }\n\n  let p = 0\n  let arr = [] // Save the root, if not given\n  const r = this.window.location.href // Avoid input failures\n\n  // Check if there's a port in path (like 'https://')\n  path = (path + '').replace('\\\\', '/')\n  if (path.indexOf('://') !== -1) {\n    p = 1\n  }\n\n  // Ok, there's not a port in path, so let's take the root\n  if (!p) {\n    path = r.substring(0, r.lastIndexOf('/') + 1) + path\n  }\n\n  // Explode the given path into it's parts\n  arr = path.split('/') // The path is an array now\n  path = [] // Foreach part make a check\n  for (const k in arr) {\n    // This is'nt really interesting\n    if (arr[k] === '.') {\n      continue\n    }\n    // This reduces the realpath\n    if (arr[k] === '..') {\n      /* But only if there more than 3 parts in the path-array.\n       * The first three parts are for the uri */\n      if (path.length > 3) {\n        path.pop()\n      }\n    } else {\n      // This adds parts to the realpath\n      // But only if the part is not empty or the uri\n      // (the first three parts ar needed) was not\n      // saved\n      if (path.length < 2 || arr[k] !== '') {\n        path.push(arr[k])\n      }\n    }\n  }\n\n  // Returns the absloute path as a string\n  return path.join('/')\n}\n"]}