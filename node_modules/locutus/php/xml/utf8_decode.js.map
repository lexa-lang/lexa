{"version":3,"sources":["../../../src/php/xml/utf8_decode.js"],"names":["module","exports","utf8_decode","strData","tmpArr","i","c1","seqlen","length","charCodeAt","ai","push","String","fromCharCode","join"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,EAAf;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,KAAK,CAAT;AACA,MAAIC,SAAS,CAAb;;AAEAJ,aAAW,EAAX;;AAEA,SAAOE,IAAIF,QAAQK,MAAnB,EAA2B;AACzBF,SAAKH,QAAQM,UAAR,CAAmBJ,CAAnB,IAAwB,IAA7B;AACAE,aAAS,CAAT;;AAEA;AACA,QAAID,MAAM,IAAV,EAAgB;AACdA,WAAKA,KAAK,IAAV;AACAC,eAAS,CAAT;AACD,KAHD,MAGO,IAAID,MAAM,IAAV,EAAgB;AACrBA,WAAKA,KAAK,IAAV;AACAC,eAAS,CAAT;AACD,KAHM,MAGA,IAAID,MAAM,IAAV,EAAgB;AACrBA,WAAKA,KAAK,IAAV;AACAC,eAAS,CAAT;AACD,KAHM,MAGA;AACLD,WAAKA,KAAK,IAAV;AACAC,eAAS,CAAT;AACD;;AAED,SAAK,IAAIG,KAAK,CAAd,EAAiBA,KAAKH,MAAtB,EAA8B,EAAEG,EAAhC,EAAoC;AAClCJ,WAAMA,MAAM,IAAP,GAAgBH,QAAQM,UAAR,CAAmBC,KAAKL,CAAxB,IAA6B,IAAlD;AACD;;AAED,QAAIE,WAAW,CAAf,EAAkB;AAChBD,YAAM,OAAN;AACAF,aAAOO,IAAP,CAAYC,OAAOC,YAAP,CAAoB,SAAWP,MAAM,EAAP,GAAa,KAA3C,CAAZ;AACAF,aAAOO,IAAP,CAAYC,OAAOC,YAAP,CAAoB,SAAUP,KAAK,KAAnC,CAAZ;AACD,KAJD,MAIO;AACLF,aAAOO,IAAP,CAAYC,OAAOC,YAAP,CAAoBP,EAApB,CAAZ;AACD;;AAEDD,SAAKE,MAAL;AACD;;AAED,SAAOH,OAAOU,IAAP,CAAY,EAAZ,CAAP;AACD,CAzDD","file":"utf8_decode.js","sourcesContent":["module.exports = function utf8_decode(strData) {\n  //  discuss at: https://locutus.io/php/utf8_decode/\n  // original by: Webtoolkit.info (https://www.webtoolkit.info/)\n  //    input by: Aman Gupta\n  //    input by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Norman \"zEh\" Fuchs\n  // bugfixed by: hitwork\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: kirilloid\n  // bugfixed by: w35l3y (https://www.wesley.eti.br)\n  //   example 1: utf8_decode('Kevin van Zonneveld')\n  //   returns 1: 'Kevin van Zonneveld'\n\n  const tmpArr = []\n  let i = 0\n  let c1 = 0\n  let seqlen = 0\n\n  strData += ''\n\n  while (i < strData.length) {\n    c1 = strData.charCodeAt(i) & 0xff\n    seqlen = 0\n\n    // https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n    if (c1 <= 0xbf) {\n      c1 = c1 & 0x7f\n      seqlen = 1\n    } else if (c1 <= 0xdf) {\n      c1 = c1 & 0x1f\n      seqlen = 2\n    } else if (c1 <= 0xef) {\n      c1 = c1 & 0x0f\n      seqlen = 3\n    } else {\n      c1 = c1 & 0x07\n      seqlen = 4\n    }\n\n    for (let ai = 1; ai < seqlen; ++ai) {\n      c1 = (c1 << 0x06) | (strData.charCodeAt(ai + i) & 0x3f)\n    }\n\n    if (seqlen === 4) {\n      c1 -= 0x10000\n      tmpArr.push(String.fromCharCode(0xd800 | ((c1 >> 10) & 0x3ff)))\n      tmpArr.push(String.fromCharCode(0xdc00 | (c1 & 0x3ff)))\n    } else {\n      tmpArr.push(String.fromCharCode(c1))\n    }\n\n    i += seqlen\n  }\n\n  return tmpArr.join('')\n}\n"]}