{"version":3,"sources":["../../../src/php/xml/utf8_encode.js"],"names":["module","exports","utf8_encode","argString","string","utftext","start","end","stringl","length","n","c1","charCodeAt","enc","String","fromCharCode","RangeError","c2","slice"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIA,cAAc,IAAd,IAAsB,OAAOA,SAAP,KAAqB,WAA/C,EAA4D;AAC1D,WAAO,EAAP;AACD;;AAED;AACA,MAAMC,SAASD,YAAY,EAA3B;AACA,MAAIE,UAAU,EAAd;AACA,MAAIC,cAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,UAAU,CAAd;;AAEAF,UAAQC,MAAM,CAAd;AACAC,YAAUJ,OAAOK,MAAjB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAApB,EAA6BE,GAA7B,EAAkC;AAChC,QAAIC,KAAKP,OAAOQ,UAAP,CAAkBF,CAAlB,CAAT;AACA,QAAIG,MAAM,IAAV;;AAEA,QAAIF,KAAK,GAAT,EAAc;AACZJ;AACD,KAFD,MAEO,IAAII,KAAK,GAAL,IAAYA,KAAK,IAArB,EAA2B;AAChCE,YAAMC,OAAOC,YAAP,CAAqBJ,MAAM,CAAP,GAAY,GAAhC,EAAsCA,KAAK,EAAN,GAAY,GAAjD,CAAN;AACD,KAFM,MAEA,IAAI,CAACA,KAAK,MAAN,MAAkB,MAAtB,EAA8B;AACnCE,YAAMC,OAAOC,YAAP,CAAqBJ,MAAM,EAAP,GAAa,GAAjC,EAAwCA,MAAM,CAAP,GAAY,EAAb,GAAmB,GAAzD,EAA+DA,KAAK,EAAN,GAAY,GAA1E,CAAN;AACD,KAFM,MAEA;AACL;AACA,UAAI,CAACA,KAAK,MAAN,MAAkB,MAAtB,EAA8B;AAC5B,cAAM,IAAIK,UAAJ,CAAe,kCAAkCN,CAAjD,CAAN;AACD;AACD,UAAMO,KAAKb,OAAOQ,UAAP,CAAkB,EAAEF,CAApB,CAAX;AACA,UAAI,CAACO,KAAK,MAAN,MAAkB,MAAtB,EAA8B;AAC5B,cAAM,IAAID,UAAJ,CAAe,kCAAkCN,IAAI,CAAtC,CAAf,CAAN;AACD;AACDC,WAAK,CAAC,CAACA,KAAK,KAAN,KAAgB,EAAjB,KAAwBM,KAAK,KAA7B,IAAsC,OAA3C;AACAJ,YAAMC,OAAOC,YAAP,CAAqBJ,MAAM,EAAP,GAAa,GAAjC,EAAwCA,MAAM,EAAP,GAAa,EAAd,GAAoB,GAA1D,EAAiEA,MAAM,CAAP,GAAY,EAAb,GAAmB,GAAlF,EAAwFA,KAAK,EAAN,GAAY,GAAnG,CAAN;AACD;AACD,QAAIE,QAAQ,IAAZ,EAAkB;AAChB,UAAIN,MAAMD,KAAV,EAAiB;AACfD,mBAAWD,OAAOc,KAAP,CAAaZ,KAAb,EAAoBC,GAApB,CAAX;AACD;AACDF,iBAAWQ,GAAX;AACAP,cAAQC,MAAMG,IAAI,CAAlB;AACD;AACF;;AAED,MAAIH,MAAMD,KAAV,EAAiB;AACfD,eAAWD,OAAOc,KAAP,CAAaZ,KAAb,EAAoBE,OAApB,CAAX;AACD;;AAED,SAAOH,OAAP;AACD,CAjED","file":"utf8_encode.js","sourcesContent":["module.exports = function utf8_encode(argString) {\n  //  discuss at: https://locutus.io/php/utf8_encode/\n  // original by: Webtoolkit.info (https://www.webtoolkit.info/)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: sowberry\n  // improved by: Jack\n  // improved by: Yves Sucaet\n  // improved by: kirilloid\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Ulrich\n  // bugfixed by: Rafa≈Ç Kukawski (https://blog.kukawski.pl)\n  // bugfixed by: kirilloid\n  //   example 1: utf8_encode('Kevin van Zonneveld')\n  //   returns 1: 'Kevin van Zonneveld'\n\n  if (argString === null || typeof argString === 'undefined') {\n    return ''\n  }\n\n  // .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  const string = argString + ''\n  let utftext = ''\n  let start\n  let end\n  let stringl = 0\n\n  start = end = 0\n  stringl = string.length\n  for (let n = 0; n < stringl; n++) {\n    let c1 = string.charCodeAt(n)\n    let enc = null\n\n    if (c1 < 128) {\n      end++\n    } else if (c1 > 127 && c1 < 2048) {\n      enc = String.fromCharCode((c1 >> 6) | 192, (c1 & 63) | 128)\n    } else if ((c1 & 0xf800) !== 0xd800) {\n      enc = String.fromCharCode((c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)\n    } else {\n      // surrogate pairs\n      if ((c1 & 0xfc00) !== 0xd800) {\n        throw new RangeError('Unmatched trail surrogate at ' + n)\n      }\n      const c2 = string.charCodeAt(++n)\n      if ((c2 & 0xfc00) !== 0xdc00) {\n        throw new RangeError('Unmatched lead surrogate at ' + (n - 1))\n      }\n      c1 = ((c1 & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000\n      enc = String.fromCharCode((c1 >> 18) | 240, ((c1 >> 12) & 63) | 128, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)\n    }\n    if (enc !== null) {\n      if (end > start) {\n        utftext += string.slice(start, end)\n      }\n      utftext += enc\n      start = end = n + 1\n    }\n  }\n\n  if (end > start) {\n    utftext += string.slice(start, stringl)\n  }\n\n  return utftext\n}\n"]}