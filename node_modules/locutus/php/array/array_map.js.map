{"version":3,"sources":["../../../src/php/array/array_map.js"],"names":["module","exports","array_map","callback","argc","arguments","length","argv","obj","cb","j","i","k","m","tmp","tmpArr","$global","window","global","Error","apply"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAOC,UAAUC,MAAvB;AACA,MAAMC,OAAOF,SAAb;AACA,MAAIG,MAAM,IAAV;AACA,MAAIC,KAAKN,QAAT;AACA,MAAMO,IAAIH,KAAK,CAAL,EAAQD,MAAlB;AACA,MAAIK,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,MAAM,EAAV;AACA,MAAMC,SAAS,EAAf;;AAEA,MAAMC,UAAU,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAzD;;AAEA,SAAOP,IAAID,CAAX,EAAc;AACZ,WAAOE,IAAIR,IAAX,EAAiB;AACfU,UAAID,GAAJ,IAAWN,KAAKK,GAAL,EAAUD,CAAV,CAAX;AACD;;AAEDE,QAAI,CAAJ;AACAD,QAAI,CAAJ;;AAEA,QAAIT,QAAJ,EAAc;AACZ,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCM,aAAKO,QAAQb,QAAR,CAAL;AACD,OAFD,MAEO,IAAI,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAApB,IAAgCA,SAASG,MAA7C,EAAqD;AAC1DE,cAAM,OAAOL,SAAS,CAAT,CAAP,KAAuB,QAAvB,GAAkCa,QAAQb,SAAS,CAAT,CAAR,CAAlC,GAAyDA,SAAS,CAAT,CAA/D;AACA,YAAI,OAAOK,GAAP,KAAe,WAAnB,EAAgC;AAC9B,gBAAM,IAAIW,KAAJ,CAAU,uBAAuBhB,SAAS,CAAT,CAAjC,CAAN;AACD;AACDM,aAAK,OAAON,SAAS,CAAT,CAAP,KAAuB,QAAvB,GAAkCK,IAAIL,SAAS,CAAT,CAAJ,CAAlC,GAAqDA,SAAS,CAAT,CAA1D;AACD;AACDY,aAAOJ,GAAP,IAAcF,GAAGW,KAAH,CAASZ,GAAT,EAAcM,GAAd,CAAd;AACD,KAXD,MAWO;AACLC,aAAOJ,GAAP,IAAcG,GAAd;AACD;;AAEDA,UAAM,EAAN;AACD;;AAED,SAAOC,MAAP;AACD,CAnDD","file":"array_map.js","sourcesContent":["module.exports = function array_map(callback) {\n  //  discuss at: https://locutus.io/php/array_map/\n  // original by: Andrea Giammarchi (https://webreflection.blogspot.com)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  //    input by: thekid\n  //      note 1: If the callback is a string (or object, if an array is supplied),\n  //      note 1: it can only work if the function name is in the global context\n  //   example 1: array_map( function (a){return (a * a * a)}, [1, 2, 3, 4, 5] )\n  //   returns 1: [ 1, 8, 27, 64, 125 ]\n\n  const argc = arguments.length\n  const argv = arguments\n  let obj = null\n  let cb = callback\n  const j = argv[1].length\n  let i = 0\n  let k = 1\n  let m = 0\n  let tmp = []\n  const tmpArr = []\n\n  const $global = typeof window !== 'undefined' ? window : global\n\n  while (i < j) {\n    while (k < argc) {\n      tmp[m++] = argv[k++][i]\n    }\n\n    m = 0\n    k = 1\n\n    if (callback) {\n      if (typeof callback === 'string') {\n        cb = $global[callback]\n      } else if (typeof callback === 'object' && callback.length) {\n        obj = typeof callback[0] === 'string' ? $global[callback[0]] : callback[0]\n        if (typeof obj === 'undefined') {\n          throw new Error('Object not found: ' + callback[0])\n        }\n        cb = typeof callback[1] === 'string' ? obj[callback[1]] : callback[1]\n      }\n      tmpArr[i++] = cb.apply(obj, tmp)\n    } else {\n      tmpArr[i++] = tmp\n    }\n\n    tmp = []\n  }\n\n  return tmpArr\n}\n"]}