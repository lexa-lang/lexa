{"version":3,"sources":["../../../src/php/array/array_column.js"],"names":["module","exports","array_column","input","ColumnKey","IndexKey","Array","isArray","newarray","temparray","Object","keys","key","push","assign"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAyD;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIF,UAAU,IAAV,KAAmB,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BG,MAAMC,OAAN,CAAcJ,KAAd,CAAhD,CAAJ,EAA2E;AACzE,QAAMK,WAAW,EAAjB;AACA,QAAI,QAAOL,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+B;AAC7B,UAAMM,YAAY,EAAlB;AAD6B;AAAA;AAAA;;AAAA;AAE7B,6BAAkBC,OAAOC,IAAP,CAAYR,KAAZ,CAAlB,8HAAsC;AAAA,cAA3BS,GAA2B;;AACpCH,oBAAUI,IAAV,CAAeV,MAAMS,GAAN,CAAf;AACD;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK7BT,cAAQM,SAAR;AACD;AACD,QAAIH,MAAMC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AAAA;AAAA;AAAA;;AAAA;AACxB,8BAAkBA,MAAMQ,IAAN,EAAlB,mIAAgC;AAAA,cAArBC,IAAqB;;AAC9B,cAAIP,YAAYF,MAAMS,IAAN,EAAWP,QAAX,CAAhB,EAAsC;AACpC,gBAAID,SAAJ,EAAe;AACbI,uBAASL,MAAMS,IAAN,EAAWP,QAAX,CAAT,IAAiCF,MAAMS,IAAN,EAAWR,SAAX,CAAjC;AACD,aAFD,MAEO;AACLI,uBAASL,MAAMS,IAAN,EAAWP,QAAX,CAAT,IAAiCF,MAAMS,IAAN,CAAjC;AACD;AACF,WAND,MAMO;AACL,gBAAIR,SAAJ,EAAe;AACbI,uBAASK,IAAT,CAAcV,MAAMS,IAAN,EAAWR,SAAX,CAAd;AACD,aAFD,MAEO;AACLI,uBAASK,IAAT,CAAcV,MAAMS,IAAN,CAAd;AACD;AACF;AACF;AAfuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBzB;AACD,WAAOF,OAAOI,MAAP,CAAc,EAAd,EAAkBN,QAAlB,CAAP;AACD;AACF,CAxCD","file":"array_column.js","sourcesContent":["module.exports = function array_column(input, ColumnKey, IndexKey = null) {\n  //   discuss at: https://locutus.io/php/array_column/\n  //   original by: Enzo Dañobeytía\n  //   example 1: array_column([{name: 'Alex', value: 1}, {name: 'Elvis', value: 2}, {name: 'Michael', value: 3}], 'name')\n  //   returns 1: {0: \"Alex\", 1: \"Elvis\", 2: \"Michael\"}\n  //   example 2: array_column({0: {name: 'Alex', value: 1}, 1: {name: 'Elvis', value: 2}, 2: {name: 'Michael', value: 3}}, 'name')\n  //   returns 2: {0: \"Alex\", 1: \"Elvis\", 2: \"Michael\"}\n  //   example 3: array_column([{name: 'Alex', value: 1}, {name: 'Elvis', value: 2}, {name: 'Michael', value: 3}], 'name', 'value')\n  //   returns 3: {1: \"Alex\", 2: \"Elvis\", 3: \"Michael\"}\n  //   example 4: array_column([{name: 'Alex', value: 1}, {name: 'Elvis', value: 2}, {name: 'Michael', value: 3}], null, 'value')\n  //   returns 4: {1: {name: 'Alex', value: 1}, 2: {name: 'Elvis', value: 2}, 3: {name: 'Michael', value: 3}}\n\n  if (input !== null && (typeof input === 'object' || Array.isArray(input))) {\n    const newarray = []\n    if (typeof input === 'object') {\n      const temparray = []\n      for (const key of Object.keys(input)) {\n        temparray.push(input[key])\n      }\n      input = temparray\n    }\n    if (Array.isArray(input)) {\n      for (const key of input.keys()) {\n        if (IndexKey && input[key][IndexKey]) {\n          if (ColumnKey) {\n            newarray[input[key][IndexKey]] = input[key][ColumnKey]\n          } else {\n            newarray[input[key][IndexKey]] = input[key]\n          }\n        } else {\n          if (ColumnKey) {\n            newarray.push(input[key][ColumnKey])\n          } else {\n            newarray.push(input[key])\n          }\n        }\n      }\n    }\n    return Object.assign({}, newarray)\n  }\n}\n"]}