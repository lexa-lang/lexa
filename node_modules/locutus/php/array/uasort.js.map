{"version":3,"sources":["../../../src/php/array/uasort.js"],"names":["module","exports","uasort","inputArr","sorter","valArr","k","i","sortByReference","populateArr","Object","prototype","toString","call","iniVal","require","undefined","hasOwnProperty","push","sort","a","b","length"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,EAAf;AACA,MAAIC,IAAI,EAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,kBAAkB,KAAtB;AACA,MAAIC,cAAc,EAAlB;;AAEA,MAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,aAAS,KAAKA,MAAL,CAAT;AACD,GAFD,MAEO,IAAIM,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BT,MAA/B,MAA2C,gBAA/C,EAAiE;AACtEA,aAAS,KAAKA,OAAO,CAAP,CAAL,EAAgBA,OAAO,CAAP,CAAhB,CAAT;AACD;;AAED,MAAMU,SACJ,CAAC,OAAOC,OAAP,KAAmB,WAAnB,GAAiCA,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyFC,SAA1F,KAAwG,IAD1G;AAEAR,oBAAkBM,WAAW,IAA7B;AACAL,gBAAcD,kBAAkBL,QAAlB,GAA6BM,WAA3C;;AAEA,OAAKH,CAAL,IAAUH,QAAV,EAAoB;AAClB;AACA,QAAIA,SAASc,cAAT,CAAwBX,CAAxB,CAAJ,EAAgC;AAC9BD,aAAOa,IAAP,CAAY,CAACZ,CAAD,EAAIH,SAASG,CAAT,CAAJ,CAAZ;AACA,UAAIE,eAAJ,EAAqB;AACnB,eAAOL,SAASG,CAAT,CAAP;AACD;AACF;AACF;AACDD,SAAOc,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1B,WAAOjB,OAAOgB,EAAE,CAAF,CAAP,EAAaC,EAAE,CAAF,CAAb,CAAP;AACD,GAFD;;AAIA,OAAKd,IAAI,CAAT,EAAYA,IAAIF,OAAOiB,MAAvB,EAA+Bf,GAA/B,EAAoC;AAClC;AACAE,gBAAYJ,OAAOE,CAAP,EAAU,CAAV,CAAZ,IAA4BF,OAAOE,CAAP,EAAU,CAAV,CAA5B;AACD;;AAED,SAAOC,mBAAmBC,WAA1B;AACD,CAxDD","file":"uasort.js","sourcesContent":["module.exports = function uasort(inputArr, sorter) {\n  //  discuss at: https://locutus.io/php/uasort/\n  // original by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //   example 1: var $sorter = function (a, b) { if (a > b) {return 1;}if (a < b) {return -1;} return 0;}\n  //   example 1: var $fruits = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 1: uasort($fruits, $sorter)\n  //   example 1: var $result = $fruits\n  //   returns 1: {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\n\n  const valArr = []\n  let k = ''\n  let i = 0\n  let sortByReference = false\n  let populateArr = {}\n\n  if (typeof sorter === 'string') {\n    sorter = this[sorter]\n  } else if (Object.prototype.toString.call(sorter) === '[object Array]') {\n    sorter = this[sorter[0]][sorter[1]]\n  }\n\n  const iniVal =\n    (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  for (k in inputArr) {\n    // Get key and value arrays\n    if (inputArr.hasOwnProperty(k)) {\n      valArr.push([k, inputArr[k]])\n      if (sortByReference) {\n        delete inputArr[k]\n      }\n    }\n  }\n  valArr.sort(function (a, b) {\n    return sorter(a[1], b[1])\n  })\n\n  for (i = 0; i < valArr.length; i++) {\n    // Repopulate the old array\n    populateArr[valArr[i][0]] = valArr[i][1]\n  }\n\n  return sortByReference || populateArr\n}\n"]}