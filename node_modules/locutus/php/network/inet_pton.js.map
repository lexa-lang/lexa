{"version":3,"sources":["../../../src/php/network/inet_pton.js"],"names":["module","exports","inet_pton","a","m","i","j","f","String","fromCharCode","match","split","length","reHexDigits","hextet","test","parseInt","isNaN","join","repeat","reduce","tl"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAMC,IAAIC,OAAOC,YAAjB;;AAEA;AACAL,MAAID,EAAEO,KAAF,CAAQ,yBAAR,CAAJ;AACA,MAAIN,CAAJ,EAAO;AACLA,QAAIA,EAAE,CAAF,EAAKO,KAAL,CAAW,GAAX,CAAJ;AACAP,QAAIG,EAAEH,EAAE,CAAF,CAAF,EAAQA,EAAE,CAAF,CAAR,EAAcA,EAAE,CAAF,CAAd,EAAoBA,EAAE,CAAF,CAApB,CAAJ;AACA;AACA,WAAOA,EAAEQ,MAAF,KAAa,CAAb,GAAiBR,CAAjB,GAAqB,KAA5B;AACD;;AAED;AACA,MAAID,EAAES,MAAF,GAAW,EAAf,EAAmB;AACjB,WAAO,KAAP;AACD;;AAEDR,MAAID,EAAEQ,KAAF,CAAQ,IAAR,CAAJ;;AAEA,MAAIP,EAAEQ,MAAF,GAAW,CAAf,EAAkB;AAChB,WAAO,KAAP;AACD,GAhCoC,CAgCnC;;AAEF,MAAMC,cAAc,iBAApB;;AAEA,OAAKP,IAAI,CAAT,EAAYA,IAAIF,EAAEQ,MAAlB,EAA0BN,GAA1B,EAA+B;AAC7B,QAAIF,EAAEE,CAAF,EAAKM,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACA;AACD;AACDR,MAAEE,CAAF,IAAOF,EAAEE,CAAF,EAAKK,KAAL,CAAW,GAAX,CAAP;AACA,SAAKN,IAAI,CAAT,EAAYA,IAAID,EAAEE,CAAF,EAAKM,MAArB,EAA6BP,GAA7B,EAAkC;AAChC,UAAIS,SAASV,EAAEE,CAAF,EAAKD,CAAL,CAAb;AACA;AACA,UAAI,CAACQ,YAAYE,IAAZ,CAAiBD,MAAjB,CAAL,EAA+B;AAC7B,eAAO,KAAP;AACD;;AAEDA,eAASE,SAASF,MAAT,EAAiB,EAAjB,CAAT;;AAEA;AACA,UAAIG,MAAMH,MAAN,CAAJ,EAAmB;AACjB;AACA,eAAO,KAAP;AACD;AACDV,QAAEE,CAAF,EAAKD,CAAL,IAAUE,EAAEO,UAAU,CAAZ,EAAeA,SAAS,IAAxB,CAAV;AACD;AACDV,MAAEE,CAAF,IAAOF,EAAEE,CAAF,EAAKY,IAAL,CAAU,EAAV,CAAP;AACD;;AAED,SAAOd,EAAEc,IAAF,CAAO,OAAOC,MAAP,CAAc,KAAKf,EAAEgB,MAAF,CAAS,UAACC,EAAD,EAAKjB,CAAL;AAAA,WAAWiB,KAAKjB,EAAEQ,MAAlB;AAAA,GAAT,EAAmC,CAAnC,CAAnB,CAAP,CAAP;AACD,CA9DD","file":"inet_pton.js","sourcesContent":["module.exports = function inet_pton(a) {\n  //  discuss at: https://locutus.io/php/inet_pton/\n  // original by: Theriault (https://github.com/Theriault)\n  // improved by: alromh87 and JamieSlome\n  //   example 1: inet_pton('::')\n  //   returns 1: '\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0'\n  //   example 2: inet_pton('127.0.0.1')\n  //   returns 2: '\\x7F\\x00\\x00\\x01'\n\n  let m\n  let i\n  let j\n  const f = String.fromCharCode\n\n  // IPv4\n  m = a.match(/^(?:\\d{1,3}(?:\\.|$)){4}/)\n  if (m) {\n    m = m[0].split('.')\n    m = f(m[0], m[1], m[2], m[3])\n    // Return if 4 bytes, otherwise false.\n    return m.length === 4 ? m : false\n  }\n\n  // IPv6\n  if (a.length > 39) {\n    return false\n  }\n\n  m = a.split('::')\n\n  if (m.length > 2) {\n    return false\n  } // :: can't be used more than once in IPv6.\n\n  const reHexDigits = /^[\\da-f]{1,4}$/i\n\n  for (j = 0; j < m.length; j++) {\n    if (m[j].length === 0) {\n      // Skip if empty.\n      continue\n    }\n    m[j] = m[j].split(':')\n    for (i = 0; i < m[j].length; i++) {\n      let hextet = m[j][i]\n      // check if valid hex string up to 4 chars\n      if (!reHexDigits.test(hextet)) {\n        return false\n      }\n\n      hextet = parseInt(hextet, 16)\n\n      // Would be NaN if it was blank, return false.\n      if (isNaN(hextet)) {\n        // Invalid IP.\n        return false\n      }\n      m[j][i] = f(hextet >> 8, hextet & 0xff)\n    }\n    m[j] = m[j].join('')\n  }\n\n  return m.join('\\x00'.repeat(16 - m.reduce((tl, m) => tl + m.length, 0)))\n}\n"]}