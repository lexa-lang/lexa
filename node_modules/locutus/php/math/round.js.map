{"version":3,"sources":["../../../src/php/math/round.js"],"names":["roundToInt","value","mode","tmp","Math","floor","abs","module","exports","round","precision","floatCast","require","intCast","p","pow","isNaN","isFinite","trunc","preRoundPrecision","log10"],"mappings":";;AAAA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAASL,KAAT,IAAkB,GAA7B,CAAV;;AAEA,MACGC,SAAS,qBAAT,IAAkCD,UAAUE,MAAM,GAAnD,IACCD,SAAS,qBAAT,IAAkCD,UAAU,MAAM,IAAIG,KAAKC,KAAL,CAAWF,MAAM,CAAjB,CADvD,IAECD,SAAS,oBAAT,IAAiCD,UAAU,MAAM,IAAIG,KAAKC,KAAL,CAAWF,MAAM,CAAjB,CAAV,GAAgC,CAH9E,EAIE;AACAA,WAAO,CAAP;AACD;;AAED,SAAOF,QAAQ,CAAR,GAAY,CAACE,GAAb,GAAmBA,GAA1B;AACD;;AAEDI,OAAOC,OAAP,GAAiB,SAASC,KAAT,CAAeR,KAAf,EAAiE;AAAA,MAA3CS,SAA2C,uEAA/B,CAA+B;AAAA,MAA5BR,IAA4B,uEAArB,mBAAqB;;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMS,YAAYC,QAAQ,6BAAR,CAAlB;AACA,MAAMC,UAAUD,QAAQ,2BAAR,CAAhB;AACA,MAAIE,UAAJ;;AAEA;AACA;;AAEAb,UAAQU,UAAUV,KAAV,CAAR;AACAS,cAAYG,QAAQH,SAAR,CAAZ;AACAI,MAAIV,KAAKW,GAAL,CAAS,EAAT,EAAaL,SAAb,CAAJ;;AAEA,MAAIM,MAAMf,KAAN,KAAgB,CAACgB,SAAShB,KAAT,CAArB,EAAsC;AACpC,WAAOA,KAAP;AACD;;AAED;AACA;AACA,MAAIG,KAAKc,KAAL,CAAWjB,KAAX,MAAsBA,KAAtB,IAA+BS,aAAa,CAAhD,EAAmD;AACjD,WAAOT,KAAP;AACD;;AAED;AACA;AACA,MAAMkB,oBAAoB,KAAKf,KAAKC,KAAL,CAAWD,KAAKgB,KAAL,CAAWhB,KAAKE,GAAL,CAASL,KAAT,CAAX,CAAX,CAA/B;;AAEA,MAAIkB,oBAAoBT,SAApB,IAAiCS,oBAAoB,EAApB,GAAyBT,SAA9D,EAAyE;AACvET,YAAQD,WAAWC,QAAQG,KAAKW,GAAL,CAAS,EAAT,EAAaI,iBAAb,CAAnB,EAAoDjB,IAApD,CAAR;AACAD,aAASG,KAAKW,GAAL,CAAS,EAAT,EAAaX,KAAKE,GAAL,CAASI,YAAYS,iBAArB,CAAb,CAAT;AACD,GAHD,MAGO;AACLlB,aAASa,CAAT;AACD;;AAEDb,UAAQD,WAAWC,KAAX,EAAkBC,IAAlB,CAAR;;AAEA,SAAOD,QAAQa,CAAf;AACD,CA5DD","file":"round.js","sourcesContent":["function roundToInt(value, mode) {\n  let tmp = Math.floor(Math.abs(value) + 0.5)\n\n  if (\n    (mode === 'PHP_ROUND_HALF_DOWN' && value === tmp - 0.5) ||\n    (mode === 'PHP_ROUND_HALF_EVEN' && value === 0.5 + 2 * Math.floor(tmp / 2)) ||\n    (mode === 'PHP_ROUND_HALF_ODD' && value === 0.5 + 2 * Math.floor(tmp / 2) - 1)\n  ) {\n    tmp -= 1\n  }\n\n  return value < 0 ? -tmp : tmp\n}\n\nmodule.exports = function round(value, precision = 0, mode = 'PHP_ROUND_HALF_UP') {\n  //  discuss at: https://locutus.io/php/round/\n  // original by: Philip Peterson\n  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n  //  revised by: T.Wild\n  //  revised by: Rafał Kukawski (https://blog.kukawski.pl)\n  //    input by: Greenseed\n  //    input by: meo\n  //    input by: William\n  //    input by: Josep Sanz (https://www.ws3.es/)\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //  revised by: Rafał Kukawski\n  //   example 1: round(1241757, -3)\n  //   returns 1: 1242000\n  //   example 2: round(3.6)\n  //   returns 2: 4\n  //   example 3: round(2.835, 2)\n  //   returns 3: 2.84\n  //   example 4: round(1.1749999999999, 2)\n  //   returns 4: 1.17\n  //   example 5: round(58551.799999999996, 2)\n  //   returns 5: 58551.8\n  //   example 6: round(4096.485, 2)\n  //   returns 6: 4096.49\n\n  const floatCast = require('../_helpers/_php_cast_float')\n  const intCast = require('../_helpers/_php_cast_int')\n  let p\n\n  // the code is heavily based on the native PHP implementation\n  // https://github.com/php/php-src/blob/PHP-7.4/ext/standard/math.c#L355\n\n  value = floatCast(value)\n  precision = intCast(precision)\n  p = Math.pow(10, precision)\n\n  if (isNaN(value) || !isFinite(value)) {\n    return value\n  }\n\n  // if value already integer and positive precision\n  // then nothing to do, return early\n  if (Math.trunc(value) === value && precision >= 0) {\n    return value\n  }\n\n  // PHP does a pre-rounding before rounding to desired precision\n  // https://wiki.php.net/rfc/rounding#pre-rounding_to_the_value_s_precision_if_possible\n  const preRoundPrecision = 14 - Math.floor(Math.log10(Math.abs(value)))\n\n  if (preRoundPrecision > precision && preRoundPrecision - 15 < precision) {\n    value = roundToInt(value * Math.pow(10, preRoundPrecision), mode)\n    value /= Math.pow(10, Math.abs(precision - preRoundPrecision))\n  } else {\n    value *= p\n  }\n\n  value = roundToInt(value, mode)\n\n  return value / p\n}\n"]}