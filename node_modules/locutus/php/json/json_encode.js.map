{"version":3,"sources":["../../../src/php/json/json_encode.js"],"names":["module","exports","json_encode","mixedVal","$global","window","global","$locutus","php","json","JSON","retVal","stringify","undefined","SyntaxError","value","quote","string","escapeChars","join","escapable","RegExp","meta","lastIndex","test","replace","a","c","charCodeAt","toString","slice","_str","key","holder","gap","indent","i","k","v","length","mind","partial","toJSON","isFinite","String","Object","prototype","apply","hasOwnProperty","call","push","err","Error","last_error_json"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA,MAAMC,UAAU,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAzD;AACAF,UAAQG,QAAR,GAAmBH,QAAQG,QAAR,IAAoB,EAAvC;AACA,MAAMA,WAAWH,QAAQG,QAAzB;AACAA,WAASC,GAAT,GAAeD,SAASC,GAAT,IAAgB,EAA/B;;AAEA,MAAMC,OAAOL,QAAQM,IAArB;AACA,MAAIC,eAAJ;AACA,MAAI;AACF,QAAI,QAAOF,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,IAA4B,OAAOA,KAAKG,SAAZ,KAA0B,UAA1D,EAAsE;AACpE;AACAD,eAASF,KAAKG,SAAL,CAAeT,QAAf,CAAT;AACA,UAAIQ,WAAWE,SAAf,EAA0B;AACxB,cAAM,IAAIC,WAAJ,CAAgB,aAAhB,CAAN;AACD;AACD,aAAOH,MAAP;AACD;;AAED,QAAMI,QAAQZ,QAAd;;AAEA,QAAMa,QAAQ,SAARA,KAAQ,CAAUC,MAAV,EAAkB;AAC9B,UAAMC,cAAc,CAClB,SADkB,EAElB,WAFkB,EAGlB,MAHkB,EAIlB,eAJkB,EAKlB,QALkB,EAMlB,QANkB,EAOlB,QAPkB,EAQlB,eARkB,EASlB,eATkB,EAUlB,eAVkB,EAWlB,QAXkB,EAYlB,eAZkB,EAalBC,IAbkB,CAab,EAba,CAApB;AAcA,UAAMC,YAAY,IAAIC,MAAJ,CAAW,SAASH,WAAT,GAAuB,GAAlC,EAAuC,GAAvC,CAAlB;AACA,UAAMI,OAAO;AACX;AACA,cAAM,KAFK;AAGX,cAAM,KAHK;AAIX,cAAM,KAJK;AAKX,cAAM,KALK;AAMX,cAAM,KANK;AAOX,aAAK,KAPM;AAQX,cAAM;AARK,OAAb;;AAWAF,gBAAUG,SAAV,GAAsB,CAAtB;AACA,aAAOH,UAAUI,IAAV,CAAeP,MAAf,IACH,MACEA,OAAOQ,OAAP,CAAeL,SAAf,EAA0B,UAAUM,CAAV,EAAa;AACrC,YAAMC,IAAIL,KAAKI,CAAL,CAAV;AACA,eAAO,OAAOC,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4B,QAAQ,CAAC,SAASD,EAAEE,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAV,EAAwCC,KAAxC,CAA8C,CAAC,CAA/C,CAA3C;AACD,OAHD,CADF,GAKE,GANC,GAOH,MAAMb,MAAN,GAAe,GAPnB;AAQD,KApCD;;AAsCA,QAAMc,OAAO,SAAPA,IAAO,CAAUC,GAAV,EAAeC,MAAf,EAAuB;AAClC,UAAIC,MAAM,EAAV;AACA,UAAMC,SAAS,MAAf;AACA;AACA,UAAIC,IAAI,CAAR;AACA;AACA,UAAIC,IAAI,EAAR;AACA;AACA,UAAIC,IAAI,EAAR;AACA,UAAIC,SAAS,CAAb;AACA,UAAMC,OAAON,GAAb;AACA,UAAIO,UAAU,EAAd;AACA,UAAI1B,QAAQkB,OAAOD,GAAP,CAAZ;;AAEA;AACA,UAAIjB,SAAS,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA1B,IAAsC,OAAOA,MAAM2B,MAAb,KAAwB,UAAlE,EAA8E;AAC5E3B,gBAAQA,MAAM2B,MAAN,CAAaV,GAAb,CAAR;AACD;;AAED;AACA,qBAAejB,KAAf,yCAAeA,KAAf;AACE,aAAK,QAAL;AACE,iBAAOC,MAAMD,KAAN,CAAP;;AAEF,aAAK,QAAL;AACE;AACA,iBAAO4B,SAAS5B,KAAT,IAAkB6B,OAAO7B,KAAP,CAAlB,GAAkC,MAAzC;;AAEF,aAAK,SAAL;AACE;AACA,iBAAO6B,OAAO7B,KAAP,CAAP;;AAEF,aAAK,QAAL;AACE;AACA;AACA;AACA;AACA,cAAI,CAACA,KAAL,EAAY;AACV,mBAAO,MAAP;AACD;;AAED;AACAmB,iBAAOC,MAAP;AACAM,oBAAU,EAAV;;AAEA;AACA,cAAII,OAAOC,SAAP,CAAiBjB,QAAjB,CAA0BkB,KAA1B,CAAgChC,KAAhC,MAA2C,gBAA/C,EAAiE;AAC/D;AACA;AACAwB,qBAASxB,MAAMwB,MAAf;AACA,iBAAKH,IAAI,CAAT,EAAYA,IAAIG,MAAhB,EAAwBH,KAAK,CAA7B,EAAgC;AAC9BK,sBAAQL,CAAR,IAAaL,KAAKK,CAAL,EAAQrB,KAAR,KAAkB,MAA/B;AACD;;AAED;AACA;AACAuB,gBACEG,QAAQF,MAAR,KAAmB,CAAnB,GACI,IADJ,GAEIL,MACE,QAAQA,GAAR,GAAcO,QAAQtB,IAAR,CAAa,QAAQe,GAArB,CAAd,GAA0C,IAA1C,GAAiDM,IAAjD,GAAwD,GAD1D,GAEE,MAAMC,QAAQtB,IAAR,CAAa,GAAb,CAAN,GAA0B,GALlC;AAMA;AACA,mBAAOmB,CAAP;AACD;;AAED;AACA,eAAKD,CAAL,IAAUtB,KAAV,EAAiB;AACf,gBAAI8B,OAAOG,cAAP,CAAsBC,IAAtB,CAA2BlC,KAA3B,EAAkCsB,CAAlC,CAAJ,EAA0C;AACxCC,kBAAIP,KAAKM,CAAL,EAAQtB,KAAR,CAAJ;AACA,kBAAIuB,CAAJ,EAAO;AACLG,wBAAQS,IAAR,CAAalC,MAAMqB,CAAN,KAAYH,MAAM,IAAN,GAAa,GAAzB,IAAgCI,CAA7C;AACD;AACF;AACF;;AAED;AACA;AACAA,cACEG,QAAQF,MAAR,KAAmB,CAAnB,GACI,IADJ,GAEIL,MACE,QAAQA,GAAR,GAAcO,QAAQtB,IAAR,CAAa,QAAQe,GAArB,CAAd,GAA0C,IAA1C,GAAiDM,IAAjD,GAAwD,GAD1D,GAEE,MAAMC,QAAQtB,IAAR,CAAa,GAAb,CAAN,GAA0B,GALlC;AAMA;AACA,iBAAOmB,CAAP;AACF,aAAK,WAAL;AACA,aAAK,UAAL;AACA;AACE,gBAAM,IAAIxB,WAAJ,CAAgB,aAAhB,CAAN;AArEJ;AAuED,KA3FD;;AA6FA;AACA;AACA,WAAOiB,KAAK,EAAL,EAAS;AACd,UAAIhB;AADU,KAAT,CAAP;AAGD,GApJD,CAoJE,OAAOoC,GAAP,EAAY;AACZ;AACA;AACA,QAAI,EAAEA,eAAerC,WAAjB,CAAJ,EAAmC;AACjC,YAAM,IAAIsC,KAAJ,CAAU,wCAAV,CAAN;AACD;AACD;AACA7C,aAASC,GAAT,CAAa6C,eAAb,GAA+B,CAA/B;AACA,WAAO,IAAP;AACD;AACF,CAvLD","file":"json_encode.js","sourcesContent":["module.exports = function json_encode(mixedVal) {\n  //       discuss at: https://phpjs.org/functions/json_encode/\n  //      original by: Public Domain (https://www.json.org/json2.js)\n  // reimplemented by: Kevin van Zonneveld (https://kevin.vanzonneveld.net)\n  //      improved by: Michael White\n  //         input by: felix\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //        example 1: json_encode('Kevin')\n  //        returns 1: '\"Kevin\"'\n\n  /*\n    https://www.JSON.org/json2.js\n    2008-11-19\n    Public Domain.\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    See https://www.JSON.org/js.html\n  */\n\n  const $global = typeof window !== 'undefined' ? window : global\n  $global.$locutus = $global.$locutus || {}\n  const $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n\n  const json = $global.JSON\n  let retVal\n  try {\n    if (typeof json === 'object' && typeof json.stringify === 'function') {\n      // Errors will not be caught here if our own equivalent to resource\n      retVal = json.stringify(mixedVal)\n      if (retVal === undefined) {\n        throw new SyntaxError('json_encode')\n      }\n      return retVal\n    }\n\n    const value = mixedVal\n\n    const quote = function (string) {\n      const escapeChars = [\n        '\\u0000-\\u001f',\n        '\\u007f-\\u009f',\n        '\\u00ad',\n        '\\u0600-\\u0604',\n        '\\u070f',\n        '\\u17b4',\n        '\\u17b5',\n        '\\u200c-\\u200f',\n        '\\u2028-\\u202f',\n        '\\u2060-\\u206f',\n        '\\ufeff',\n        '\\ufff0-\\uffff',\n      ].join('')\n      const escapable = new RegExp('[\\\\\"' + escapeChars + ']', 'g')\n      const meta = {\n        // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\',\n      }\n\n      escapable.lastIndex = 0\n      return escapable.test(string)\n        ? '\"' +\n            string.replace(escapable, function (a) {\n              const c = meta[a]\n              return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\n            }) +\n            '\"'\n        : '\"' + string + '\"'\n    }\n\n    const _str = function (key, holder) {\n      let gap = ''\n      const indent = '    '\n      // The loop counter.\n      let i = 0\n      // The member key.\n      let k = ''\n      // The member value.\n      let v = ''\n      let length = 0\n      const mind = gap\n      let partial = []\n      let value = holder[key]\n\n      // If the value has a toJSON method, call it to obtain a replacement value.\n      if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n        value = value.toJSON(key)\n      }\n\n      // What happens next depends on the value's type.\n      switch (typeof value) {\n        case 'string':\n          return quote(value)\n\n        case 'number':\n          // JSON numbers must be finite. Encode non-finite numbers as null.\n          return isFinite(value) ? String(value) : 'null'\n\n        case 'boolean':\n          // If the value is a boolean or null, convert it to a string.\n          return String(value)\n\n        case 'object':\n          // If the type is 'object', we might be dealing with an object or an array or\n          // null.\n          // Due to a specification blunder in ECMAScript, typeof null is 'object',\n          // so watch out for that case.\n          if (!value) {\n            return 'null'\n          }\n\n          // Make an array to hold the partial results of stringifying this object value.\n          gap += indent\n          partial = []\n\n          // Is the value an array?\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            // The value is an array. Stringify every element. Use null as a placeholder\n            // for non-JSON values.\n            length = value.length\n            for (i = 0; i < length; i += 1) {\n              partial[i] = _str(i, value) || 'null'\n            }\n\n            // Join all of the elements together, separated with commas, and wrap them in\n            // brackets.\n            v =\n              partial.length === 0\n                ? '[]'\n                : gap\n                  ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n                  : '[' + partial.join(',') + ']'\n            // gap = mind // not used\n            return v\n          }\n\n          // Iterate through all of the keys in the object.\n          for (k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              v = _str(k, value)\n              if (v) {\n                partial.push(quote(k) + (gap ? ': ' : ':') + v)\n              }\n            }\n          }\n\n          // Join all of the member texts together, separated with commas,\n          // and wrap them in braces.\n          v =\n            partial.length === 0\n              ? '{}'\n              : gap\n                ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n                : '{' + partial.join(',') + '}'\n          // gap = mind // Not used\n          return v\n        case 'undefined':\n        case 'function':\n        default:\n          throw new SyntaxError('json_encode')\n      }\n    }\n\n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return _str('', {\n      '': value,\n    })\n  } catch (err) {\n    // @todo: ensure error handling above throws a SyntaxError in all cases where it could\n    // (i.e., when the JSON global is not available and there is an error)\n    if (!(err instanceof SyntaxError)) {\n      throw new Error('Unexpected error type in json_encode()')\n    }\n    // usable by json_last_error()\n    $locutus.php.last_error_json = 4\n    return null\n  }\n}\n"]}