{"version":3,"sources":["../../../src/php/strings/substr.js"],"names":["module","exports","substr","input","start","len","_php_cast_string","require","ini_get","multibyte","match","inputLength","length","end","slice","join"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,GAA9B,EAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,mBAAmBC,QAAQ,4BAAR,CAAzB,CA9BkD,CA8Ba;;AAE/DJ,UAAQG,iBAAiBH,KAAjB,CAAR;;AAEA,MAAMK,UAAUD,QAAQ,iBAAR,CAAhB,CAlCkD,CAkCP;AAC3C,MAAME,YAAYD,QAAQ,mBAAR,MAAiC,IAAnD;;AAEA,MAAIC,SAAJ,EAAe;AACbN,YAAQA,MAAMO,KAAN,CAAY,wCAAZ,KAAyD,EAAjE;AACD;;AAED,MAAMC,cAAcR,MAAMS,MAA1B;AACA,MAAIC,MAAMF,WAAV;;AAEA,MAAIP,QAAQ,CAAZ,EAAe;AACbA,aAASS,GAAT;AACD;;AAED,MAAI,OAAOR,GAAP,KAAe,WAAnB,EAAgC;AAC9B,QAAIA,MAAM,CAAV,EAAa;AACXQ,YAAMR,MAAMQ,GAAZ;AACD,KAFD,MAEO;AACLA,YAAMR,MAAMD,KAAZ;AACD;AACF;;AAED,MAAIA,QAAQO,WAAR,IAAuBP,QAAQ,CAA/B,IAAoCA,QAAQS,GAAhD,EAAqD;AACnD,WAAO,KAAP;AACD;;AAED,MAAIJ,SAAJ,EAAe;AACb,WAAON,MAAMW,KAAN,CAAYV,KAAZ,EAAmBS,GAAnB,EAAwBE,IAAxB,CAA6B,EAA7B,CAAP;AACD;;AAED,SAAOZ,MAAMW,KAAN,CAAYV,KAAZ,EAAmBS,GAAnB,CAAP;AACD,CAjED","file":"substr.js","sourcesContent":["module.exports = function substr(input, start, len) {\n  //  discuss at: https://locutus.io/php/substr/\n  // original by: Martijn Wieringa\n  // bugfixed by: T.Wild\n  // improved by: Onno Marsman (https://twitter.com/onnomarsman)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  //  revised by: Theriault (https://github.com/Theriault)\n  //  revised by: Rafa≈Ç Kukawski\n  //      note 1: Handles rare Unicode characters if 'unicode.semantics' ini (PHP6) is set to 'on'\n  //   example 1: substr('abcdef', 0, -1)\n  //   returns 1: 'abcde'\n  //   example 2: substr(2, 0, -6)\n  //   returns 2: false\n  //   example 3: ini_set('unicode.semantics', 'on')\n  //   example 3: substr('a\\uD801\\uDC00', 0, -1)\n  //   returns 3: 'a'\n  //   example 4: ini_set('unicode.semantics', 'on')\n  //   example 4: substr('a\\uD801\\uDC00', 0, 2)\n  //   returns 4: 'a\\uD801\\uDC00'\n  //   example 5: ini_set('unicode.semantics', 'on')\n  //   example 5: substr('a\\uD801\\uDC00', -1, 1)\n  //   returns 5: '\\uD801\\uDC00'\n  //   example 6: ini_set('unicode.semantics', 'on')\n  //   example 6: substr('a\\uD801\\uDC00z\\uD801\\uDC00', -3, 2)\n  //   returns 6: '\\uD801\\uDC00z'\n  //   example 7: ini_set('unicode.semantics', 'on')\n  //   example 7: substr('a\\uD801\\uDC00z\\uD801\\uDC00', -3, -1)\n  //   returns 7: '\\uD801\\uDC00z'\n  //        test: skip-3 skip-4 skip-5 skip-6 skip-7\n\n  const _php_cast_string = require('../_helpers/_phpCastString') // eslint-disable-line camelcase\n\n  input = _php_cast_string(input)\n\n  const ini_get = require('../info/ini_get') // eslint-disable-line camelcase\n  const multibyte = ini_get('unicode.semantics') === 'on'\n\n  if (multibyte) {\n    input = input.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]/g) || []\n  }\n\n  const inputLength = input.length\n  let end = inputLength\n\n  if (start < 0) {\n    start += end\n  }\n\n  if (typeof len !== 'undefined') {\n    if (len < 0) {\n      end = len + end\n    } else {\n      end = len + start\n    }\n  }\n\n  if (start > inputLength || start < 0 || start > end) {\n    return false\n  }\n\n  if (multibyte) {\n    return input.slice(start, end).join('')\n  }\n\n  return input.slice(start, end)\n}\n"]}