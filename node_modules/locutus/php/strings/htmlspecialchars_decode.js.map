{"version":3,"sources":["../../../src/php/strings/htmlspecialchars_decode.js"],"names":["module","exports","htmlspecialchars_decode","string","quoteStyle","optTemp","i","noquotes","toString","replace","OPTS","ENT_NOQUOTES","ENT_HTML_QUOTE_SINGLE","ENT_HTML_QUOTE_DOUBLE","ENT_COMPAT","ENT_QUOTES","ENT_IGNORE","concat","length"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,UAAzC,EAAqD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAU,CAAd;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,WAAW,KAAf;;AAEA,MAAI,OAAOH,UAAP,KAAsB,WAA1B,EAAuC;AACrCA,iBAAa,CAAb;AACD;AACDD,WAASA,OAAOK,QAAP,GAAkBC,OAAlB,CAA0B,OAA1B,EAAmC,GAAnC,EAAwCA,OAAxC,CAAgD,OAAhD,EAAyD,GAAzD,CAAT;AACA,MAAMC,OAAO;AACXC,kBAAc,CADH;AAEXC,2BAAuB,CAFZ;AAGXC,2BAAuB,CAHZ;AAIXC,gBAAY,CAJD;AAKXC,gBAAY,CALD;AAMXC,gBAAY;AAND,GAAb;AAQA,MAAIZ,eAAe,CAAnB,EAAsB;AACpBG,eAAW,IAAX;AACD;AACD,MAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAClC;AACAA,iBAAa,GAAGa,MAAH,CAAUb,UAAV,CAAb;AACA,SAAKE,IAAI,CAAT,EAAYA,IAAIF,WAAWc,MAA3B,EAAmCZ,GAAnC,EAAwC;AACtC;AACA,UAAII,KAAKN,WAAWE,CAAX,CAAL,MAAwB,CAA5B,EAA+B;AAC7BC,mBAAW,IAAX;AACD,OAFD,MAEO,IAAIG,KAAKN,WAAWE,CAAX,CAAL,CAAJ,EAAyB;AAC9BD,kBAAUA,UAAUK,KAAKN,WAAWE,CAAX,CAAL,CAApB;AACD;AACF;AACDF,iBAAaC,OAAb;AACD;AACD,MAAID,aAAaM,KAAKE,qBAAtB,EAA6C;AAC3C;AACAT,aAASA,OAAOM,OAAP,CAAe,UAAf,EAA2B,GAA3B,CAAT;AACA;AACA;AACD;AACD,MAAI,CAACF,QAAL,EAAe;AACbJ,aAASA,OAAOM,OAAP,CAAe,SAAf,EAA0B,GAA1B,CAAT;AACD;AACD;AACAN,WAASA,OAAOM,OAAP,CAAe,QAAf,EAAyB,GAAzB,CAAT;;AAEA,SAAON,MAAP;AACD,CAlED","file":"htmlspecialchars_decode.js","sourcesContent":["module.exports = function htmlspecialchars_decode(string, quoteStyle) {\n  //       discuss at: https://locutus.io/php/htmlspecialchars_decode/\n  //      original by: Mirek Slugen\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      bugfixed by: Mateusz \"loonquawl\" Zalega\n  //      bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //         input by: ReverseSyntax\n  //         input by: Slawomir Kaniecki\n  //         input by: Scott Cariss\n  //         input by: Francois\n  //         input by: Ratheous\n  //         input by: Mailfaker (https://www.weedem.fr/)\n  //       revised by: Kevin van Zonneveld (https://kvz.io)\n  // reimplemented by: Brett Zamir (https://brett-zamir.me)\n  //        example 1: htmlspecialchars_decode(\"<p>this -&gt; &quot;</p>\", 'ENT_NOQUOTES')\n  //        returns 1: '<p>this -> &quot;</p>'\n  //        example 2: htmlspecialchars_decode(\"&amp;quot;\")\n  //        returns 2: '&quot;'\n\n  let optTemp = 0\n  let i = 0\n  let noquotes = false\n\n  if (typeof quoteStyle === 'undefined') {\n    quoteStyle = 2\n  }\n  string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>')\n  const OPTS = {\n    ENT_NOQUOTES: 0,\n    ENT_HTML_QUOTE_SINGLE: 1,\n    ENT_HTML_QUOTE_DOUBLE: 2,\n    ENT_COMPAT: 2,\n    ENT_QUOTES: 3,\n    ENT_IGNORE: 4,\n  }\n  if (quoteStyle === 0) {\n    noquotes = true\n  }\n  if (typeof quoteStyle !== 'number') {\n    // Allow for a single string or an array of string flags\n    quoteStyle = [].concat(quoteStyle)\n    for (i = 0; i < quoteStyle.length; i++) {\n      // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n      if (OPTS[quoteStyle[i]] === 0) {\n        noquotes = true\n      } else if (OPTS[quoteStyle[i]]) {\n        optTemp = optTemp | OPTS[quoteStyle[i]]\n      }\n    }\n    quoteStyle = optTemp\n  }\n  if (quoteStyle & OPTS.ENT_HTML_QUOTE_SINGLE) {\n    // PHP doesn't currently escape if more than one 0, but it should:\n    string = string.replace(/&#0*39;/g, \"'\")\n    // This would also be useful here, but not a part of PHP:\n    // string = string.replace(/&apos;|&#x0*27;/g, \"'\");\n  }\n  if (!noquotes) {\n    string = string.replace(/&quot;/g, '\"')\n  }\n  // Put this in last place to avoid escape being double-decoded\n  string = string.replace(/&amp;/g, '&')\n\n  return string\n}\n"]}