{"version":3,"sources":["../../../src/php/strings/htmlspecialchars.js"],"names":["module","exports","htmlspecialchars","string","quoteStyle","charset","doubleEncode","optTemp","i","noquotes","toString","replace","OPTS","ENT_NOQUOTES","ENT_HTML_QUOTE_SINGLE","ENT_HTML_QUOTE_DOUBLE","ENT_COMPAT","ENT_QUOTES","ENT_IGNORE","concat","length"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,UAAlC,EAA8CC,OAA9C,EAAuDC,YAAvD,EAAqE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAU,CAAd;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,WAAW,KAAf;AACA,MAAI,OAAOL,UAAP,KAAsB,WAAtB,IAAqCA,eAAe,IAAxD,EAA8D;AAC5DA,iBAAa,CAAb;AACD;AACDD,WAASA,UAAU,EAAnB;AACAA,WAASA,OAAOO,QAAP,EAAT;;AAEA,MAAIJ,iBAAiB,KAArB,EAA4B;AAC1B;AACAH,aAASA,OAAOQ,OAAP,CAAe,IAAf,EAAqB,OAArB,CAAT;AACD;;AAEDR,WAASA,OAAOQ,OAAP,CAAe,IAAf,EAAqB,MAArB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,MAA3C,CAAT;;AAEA,MAAMC,OAAO;AACXC,kBAAc,CADH;AAEXC,2BAAuB,CAFZ;AAGXC,2BAAuB,CAHZ;AAIXC,gBAAY,CAJD;AAKXC,gBAAY,CALD;AAMXC,gBAAY;AAND,GAAb;AAQA,MAAId,eAAe,CAAnB,EAAsB;AACpBK,eAAW,IAAX;AACD;AACD,MAAI,OAAOL,UAAP,KAAsB,QAA1B,EAAoC;AAClC;AACAA,iBAAa,GAAGe,MAAH,CAAUf,UAAV,CAAb;AACA,SAAKI,IAAI,CAAT,EAAYA,IAAIJ,WAAWgB,MAA3B,EAAmCZ,GAAnC,EAAwC;AACtC;AACA,UAAII,KAAKR,WAAWI,CAAX,CAAL,MAAwB,CAA5B,EAA+B;AAC7BC,mBAAW,IAAX;AACD,OAFD,MAEO,IAAIG,KAAKR,WAAWI,CAAX,CAAL,CAAJ,EAAyB;AAC9BD,kBAAUA,UAAUK,KAAKR,WAAWI,CAAX,CAAL,CAApB;AACD;AACF;AACDJ,iBAAaG,OAAb;AACD;AACD,MAAIH,aAAaQ,KAAKE,qBAAtB,EAA6C;AAC3CX,aAASA,OAAOQ,OAAP,CAAe,IAAf,EAAqB,QAArB,CAAT;AACD;AACD,MAAI,CAACF,QAAL,EAAe;AACbN,aAASA,OAAOQ,OAAP,CAAe,IAAf,EAAqB,QAArB,CAAT;AACD;;AAED,SAAOR,MAAP;AACD,CArED","file":"htmlspecialchars.js","sourcesContent":["module.exports = function htmlspecialchars(string, quoteStyle, charset, doubleEncode) {\n  //       discuss at: https://locutus.io/php/htmlspecialchars/\n  //      original by: Mirek Slugen\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\n  //      bugfixed by: Nathan\n  //      bugfixed by: Arno\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //      bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //       revised by: Kevin van Zonneveld (https://kvz.io)\n  //         input by: Ratheous\n  //         input by: Mailfaker (https://www.weedem.fr/)\n  //         input by: felix\n  // reimplemented by: Brett Zamir (https://brett-zamir.me)\n  //           note 1: charset argument not supported\n  //        example 1: htmlspecialchars(\"<a href='test'>Test</a>\", 'ENT_QUOTES')\n  //        returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'\n  //        example 2: htmlspecialchars(\"ab\\\"c'd\", ['ENT_NOQUOTES', 'ENT_QUOTES'])\n  //        returns 2: 'ab\"c&#039;d'\n  //        example 3: htmlspecialchars('my \"&entity;\" is still here', null, null, false)\n  //        returns 3: 'my &quot;&entity;&quot; is still here'\n\n  let optTemp = 0\n  let i = 0\n  let noquotes = false\n  if (typeof quoteStyle === 'undefined' || quoteStyle === null) {\n    quoteStyle = 2\n  }\n  string = string || ''\n  string = string.toString()\n\n  if (doubleEncode !== false) {\n    // Put this first to avoid double-encoding\n    string = string.replace(/&/g, '&amp;')\n  }\n\n  string = string.replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\n  const OPTS = {\n    ENT_NOQUOTES: 0,\n    ENT_HTML_QUOTE_SINGLE: 1,\n    ENT_HTML_QUOTE_DOUBLE: 2,\n    ENT_COMPAT: 2,\n    ENT_QUOTES: 3,\n    ENT_IGNORE: 4,\n  }\n  if (quoteStyle === 0) {\n    noquotes = true\n  }\n  if (typeof quoteStyle !== 'number') {\n    // Allow for a single string or an array of string flags\n    quoteStyle = [].concat(quoteStyle)\n    for (i = 0; i < quoteStyle.length; i++) {\n      // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4\n      if (OPTS[quoteStyle[i]] === 0) {\n        noquotes = true\n      } else if (OPTS[quoteStyle[i]]) {\n        optTemp = optTemp | OPTS[quoteStyle[i]]\n      }\n    }\n    quoteStyle = optTemp\n  }\n  if (quoteStyle & OPTS.ENT_HTML_QUOTE_SINGLE) {\n    string = string.replace(/'/g, '&#039;')\n  }\n  if (!noquotes) {\n    string = string.replace(/\"/g, '&quot;')\n  }\n\n  return string\n}\n"]}