{"version":3,"sources":["../../../src/php/strings/number_format.js"],"names":["module","exports","number_format","number","decimals","decPoint","thousandsSep","replace","n","isFinite","prec","Math","abs","sep","dec","s","toFixedFix","indexOf","round","arr","split","sig","toFixed","toString","length","Array","join"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,YAAnD,EAAiE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,WAAS,CAACA,SAAS,EAAV,EAAcI,OAAd,CAAsB,eAAtB,EAAuC,EAAvC,CAAT;AACA,MAAMC,IAAI,CAACC,SAAS,CAACN,MAAV,CAAD,GAAqB,CAArB,GAAyB,CAACA,MAApC;AACA,MAAMO,OAAO,CAACD,SAAS,CAACL,QAAV,CAAD,GAAuB,CAAvB,GAA2BO,KAAKC,GAAL,CAASR,QAAT,CAAxC;AACA,MAAMS,MAAM,OAAOP,YAAP,KAAwB,WAAxB,GAAsC,GAAtC,GAA4CA,YAAxD;AACA,MAAMQ,MAAM,OAAOT,QAAP,KAAoB,WAApB,GAAkC,GAAlC,GAAwCA,QAApD;AACA,MAAIU,IAAI,EAAR;;AAEA,MAAMC,aAAa,SAAbA,UAAa,CAAUR,CAAV,EAAaE,IAAb,EAAmB;AACpC,QAAI,CAAC,KAAKF,CAAN,EAASS,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAChC,aAAO,EAAEN,KAAKO,KAAL,CAAWV,IAAI,IAAJ,GAAWE,IAAtB,IAA8B,IAA9B,GAAqCA,IAAvC,CAAP;AACD,KAFD,MAEO;AACL,UAAMS,MAAM,CAAC,KAAKX,CAAN,EAASY,KAAT,CAAe,GAAf,CAAZ;AACA,UAAIC,MAAM,EAAV;AACA,UAAI,CAACF,IAAI,CAAJ,CAAD,GAAUT,IAAV,GAAiB,CAArB,EAAwB;AACtBW,cAAM,GAAN;AACD;AACD,aAAO,CAAC,EAAEV,KAAKO,KAAL,CAAW,CAACC,IAAI,CAAJ,CAAD,GAAU,GAAV,GAAgBE,GAAhB,IAAuB,CAACF,IAAI,CAAJ,CAAD,GAAUT,IAAjC,CAAX,IAAqD,IAArD,GAA4DA,IAA9D,CAAD,EAAsEY,OAAtE,CAA8EZ,IAA9E,CAAP;AACD;AACF,GAXD;;AAaA;AACAK,MAAI,CAACL,OAAOM,WAAWR,CAAX,EAAcE,IAAd,EAAoBa,QAApB,EAAP,GAAwC,KAAKZ,KAAKO,KAAL,CAAWV,CAAX,CAA9C,EAA6DY,KAA7D,CAAmE,GAAnE,CAAJ;AACA,MAAIL,EAAE,CAAF,EAAKS,MAAL,GAAc,CAAlB,EAAqB;AACnBT,MAAE,CAAF,IAAOA,EAAE,CAAF,EAAKR,OAAL,CAAa,yBAAb,EAAwCM,GAAxC,CAAP;AACD;AACD,MAAI,CAACE,EAAE,CAAF,KAAQ,EAAT,EAAaS,MAAb,GAAsBd,IAA1B,EAAgC;AAC9BK,MAAE,CAAF,IAAOA,EAAE,CAAF,KAAQ,EAAf;AACAA,MAAE,CAAF,KAAQ,IAAIU,KAAJ,CAAUf,OAAOK,EAAE,CAAF,EAAKS,MAAZ,GAAqB,CAA/B,EAAkCE,IAAlC,CAAuC,GAAvC,CAAR;AACD;;AAED,SAAOX,EAAEW,IAAF,CAAOZ,GAAP,CAAP;AACD,CAlFD","file":"number_format.js","sourcesContent":["module.exports = function number_format(number, decimals, decPoint, thousandsSep) {\n  //  discuss at: https://locutus.io/php/number_format/\n  // original by: Jonas Raoni Soares Silva (https://www.jsfromhell.com)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: davook\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Brett Zamir (https://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Michael White (https://getsprink.com)\n  // bugfixed by: Benjamin Lupton\n  // bugfixed by: Allan Jensen (https://www.winternet.no)\n  // bugfixed by: Howard Yeend\n  // bugfixed by: Diogo Resende\n  // bugfixed by: Rival\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  //  revised by: Jonas Raoni Soares Silva (https://www.jsfromhell.com)\n  //  revised by: Luke Smith (https://lucassmith.name)\n  //    input by: Kheang Hok Chin (https://www.distantia.ca/)\n  //    input by: Jay Klehr\n  //    input by: Amir Habibi (https://www.residence-mixte.com/)\n  //    input by: Amirouche\n  //   example 1: number_format(1234.56)\n  //   returns 1: '1,235'\n  //   example 2: number_format(1234.56, 2, ',', ' ')\n  //   returns 2: '1 234,56'\n  //   example 3: number_format(1234.5678, 2, '.', '')\n  //   returns 3: '1234.57'\n  //   example 4: number_format(67, 2, ',', '.')\n  //   returns 4: '67,00'\n  //   example 5: number_format(1000)\n  //   returns 5: '1,000'\n  //   example 6: number_format(67.311, 2)\n  //   returns 6: '67.31'\n  //   example 7: number_format(1000.55, 1)\n  //   returns 7: '1,000.6'\n  //   example 8: number_format(67000, 5, ',', '.')\n  //   returns 8: '67.000,00000'\n  //   example 9: number_format(0.9, 0)\n  //   returns 9: '1'\n  //  example 10: number_format('1.20', 2)\n  //  returns 10: '1.20'\n  //  example 11: number_format('1.20', 4)\n  //  returns 11: '1.2000'\n  //  example 12: number_format('1.2000', 3)\n  //  returns 12: '1.200'\n  //  example 13: number_format('1 000,50', 2, '.', ' ')\n  //  returns 13: '100 050.00'\n  //  example 14: number_format(1e-8, 8, '.', '')\n  //  returns 14: '0.00000001'\n\n  number = (number + '').replace(/[^0-9+\\-Ee.]/g, '')\n  const n = !isFinite(+number) ? 0 : +number\n  const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)\n  const sep = typeof thousandsSep === 'undefined' ? ',' : thousandsSep\n  const dec = typeof decPoint === 'undefined' ? '.' : decPoint\n  let s = ''\n\n  const toFixedFix = function (n, prec) {\n    if (('' + n).indexOf('e') === -1) {\n      return +(Math.round(n + 'e+' + prec) + 'e-' + prec)\n    } else {\n      const arr = ('' + n).split('e')\n      let sig = ''\n      if (+arr[1] + prec > 0) {\n        sig = '+'\n      }\n      return (+(Math.round(+arr[0] + 'e' + sig + (+arr[1] + prec)) + 'e-' + prec)).toFixed(prec)\n    }\n  }\n\n  // @todo: for IE parseFloat(0.55).toFixed(0) = 0;\n  s = (prec ? toFixedFix(n, prec).toString() : '' + Math.round(n)).split('.')\n  if (s[0].length > 3) {\n    s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)\n  }\n  if ((s[1] || '').length < prec) {\n    s[1] = s[1] || ''\n    s[1] += new Array(prec - s[1].length + 1).join('0')\n  }\n\n  return s.join(dec)\n}\n"]}