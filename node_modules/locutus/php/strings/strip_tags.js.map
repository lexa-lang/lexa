{"version":3,"sources":["../../../src/php/strings/strip_tags.js"],"names":["module","exports","strip_tags","input","allowed","_phpCastString","require","toLowerCase","match","join","tags","commentsAndPhpTags","after","substring","length","before","replace","$0","$1","indexOf"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiBC,QAAQ,4BAAR,CAAvB;;AAEA;AACAF,YAAU,CAAC,CAAC,CAACA,WAAW,EAAZ,IAAkB,EAAnB,EAAuBG,WAAvB,GAAqCC,KAArC,CAA2C,mBAA3C,KAAmE,EAApE,EAAwEC,IAAxE,CAA6E,EAA7E,CAAV;;AAEA,MAAMC,OAAO,4BAAb;AACA,MAAMC,qBAAqB,0CAA3B;;AAEA,MAAIC,QAAQP,eAAeF,KAAf,CAAZ;AACA;AACAS,UAAQA,MAAMC,SAAN,CAAgBD,MAAME,MAAN,GAAe,CAA/B,MAAsC,GAAtC,GAA4CF,MAAMC,SAAN,CAAgB,CAAhB,EAAmBD,MAAME,MAAN,GAAe,CAAlC,CAA5C,GAAmFF,KAA3F;;AAEA;AACA,SAAO,IAAP,EAAa;AACX,QAAMG,SAASH,KAAf;AACAA,YAAQG,OAAOC,OAAP,CAAeL,kBAAf,EAAmC,EAAnC,EAAuCK,OAAvC,CAA+CN,IAA/C,EAAqD,UAAUO,EAAV,EAAcC,EAAd,EAAkB;AAC7E,aAAOd,QAAQe,OAAR,CAAgB,MAAMD,GAAGX,WAAH,EAAN,GAAyB,GAAzC,IAAgD,CAAC,CAAjD,GAAqDU,EAArD,GAA0D,EAAjE;AACD,KAFO,CAAR;;AAIA;AACA,QAAIF,WAAWH,KAAf,EAAsB;AACpB,aAAOA,KAAP;AACD;AACF;AACF,CAhED","file":"strip_tags.js","sourcesContent":["module.exports = function strip_tags(input, allowed) {\n  //  discuss at: https://locutus.io/php/strip_tags/\n  // original by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Luke Godfrey\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  //    input by: Pul\n  //    input by: Alex\n  //    input by: Marc Palau\n  //    input by: Brett Zamir (https://brett-zamir.me)\n  //    input by: Bobby Drake\n  //    input by: Evertjan Garretsen\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Eric Nagel\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Tomasz Wesolowski\n  // bugfixed by: Tymon Sturgeon (https://scryptonite.com)\n  // bugfixed by: Tim de Koning (https://www.kingsquare.nl)\n  //  revised by: Rafa≈Ç Kukawski (https://blog.kukawski.pl)\n  //   example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>')\n  //   returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n  //   example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>')\n  //   returns 2: '<p>Kevin van Zonneveld</p>'\n  //   example 3: strip_tags(\"<a href='https://kvz.io'>Kevin van Zonneveld</a>\", \"<a>\")\n  //   returns 3: \"<a href='https://kvz.io'>Kevin van Zonneveld</a>\"\n  //   example 4: strip_tags('1 < 5 5 > 1')\n  //   returns 4: '1 < 5 5 > 1'\n  //   example 5: strip_tags('1 <br/> 1')\n  //   returns 5: '1  1'\n  //   example 6: strip_tags('1 <br/> 1', '<br>')\n  //   returns 6: '1 <br/> 1'\n  //   example 7: strip_tags('1 <br/> 1', '<br><br/>')\n  //   returns 7: '1 <br/> 1'\n  //   example 8: strip_tags('<i>hello</i> <<foo>script>world<</foo>/script>')\n  //   returns 8: 'hello world'\n  //   example 9: strip_tags(4)\n  //   returns 9: '4'\n\n  const _phpCastString = require('../_helpers/_phpCastString')\n\n  // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n  allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('')\n\n  const tags = /<\\/?([a-z0-9]*)\\b[^>]*>?/gi\n  const commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi\n\n  let after = _phpCastString(input)\n  // removes tha '<' char at the end of the string to replicate PHP's behaviour\n  after = after.substring(after.length - 1) === '<' ? after.substring(0, after.length - 1) : after\n\n  // recursively remove tags to ensure that the returned string doesn't contain forbidden tags after previous passes (e.g. '<<bait/>switch/>')\n  while (true) {\n    const before = after\n    after = before.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\n      return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : ''\n    })\n\n    // return once no more tags are removed\n    if (before === after) {\n      return after\n    }\n  }\n}\n"]}